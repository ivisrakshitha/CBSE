{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nexport default {\n  name: 'TypewriterText',\n  props: {\n    text: {\n      type: String,\n      required: true\n    },\n    charSpeed: {\n      type: Number,\n      default: 50 // milliseconds per character\n    },\n    lineDelay: {\n      type: Number,\n      default: 500 // milliseconds between lines\n    },\n    startOnIntersect: {\n      type: Boolean,\n      default: true // start when visible\n    }\n  },\n  data() {\n    return {\n      displayedLines: [],\n      currentLineIndex: 0,\n      currentCharIndex: 0,\n      fullLines: [],\n      isTyping: false,\n      timeoutId: null,\n      observer: null\n    };\n  },\n  mounted() {\n    this.fullLines = this.text.split('\\n').filter(line => line.trim() !== '');\n    if (this.startOnIntersect) {\n      this.setupIntersectionObserver();\n    } else {\n      setTimeout(() => {\n        this.startTyping();\n      }, 0);\n    }\n  },\n  beforeUnmount() {\n    this.cleanup();\n  },\n  methods: {\n    startTyping() {\n      if (this.isTyping || this.displayedLines.length === this.fullLines.length) return;\n      this.isTyping = true;\n      this.typeNextCharacter();\n    },\n    typeNextCharacter() {\n      const currentLine = this.fullLines[this.currentLineIndex];\n      if (this.currentCharIndex <= currentLine.length) {\n        this.$set(this.displayedLines, this.currentLineIndex, currentLine.slice(0, this.currentCharIndex));\n        this.currentCharIndex++;\n        this.timeoutId = setTimeout(() => {\n          this.typeNextCharacter();\n        }, this.charSpeed);\n      } else {\n        // Move to next line after finishing current one\n        this.currentLineIndex++;\n        this.currentCharIndex = 0;\n        if (this.currentLineIndex < this.fullLines.length) {\n          this.timeoutId = setTimeout(() => {\n            this.typeNextCharacter();\n          }, this.lineDelay);\n        } else {\n          this.isTyping = false;\n        }\n      }\n    },\n    setupIntersectionObserver() {\n      const options = {\n        root: null,\n        rootMargin: '0px',\n        threshold: 0.1\n      };\n      this.observer = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting && !this.isTyping && this.displayedLines.length === 0) {\n            this.startTyping();\n          }\n        });\n      }, options);\n      if (this.$refs.textContainer) {\n        this.observer.observe(this.$refs.textContainer);\n      }\n    },\n    cleanup() {\n      if (this.timeoutId) clearTimeout(this.timeoutId);\n      if (this.observer) this.observer.disconnect();\n    }\n  }\n};","map":{"version":3,"names":["name","props","text","type","String","required","charSpeed","Number","default","lineDelay","startOnIntersect","Boolean","data","displayedLines","currentLineIndex","currentCharIndex","fullLines","isTyping","timeoutId","observer","mounted","split","filter","line","trim","setupIntersectionObserver","setTimeout","startTyping","beforeUnmount","cleanup","methods","length","typeNextCharacter","currentLine","$set","slice","options","root","rootMargin","threshold","IntersectionObserver","entries","forEach","entry","isIntersecting","$refs","textContainer","observe","clearTimeout","disconnect"],"sources":["F:\\IVIS_PROJECTS\\2025\\JULY\\cbse\\src\\components\\TypewriterText.vue"],"sourcesContent":["<!-- TypewriterText.vue -->\r\n<template>\r\n  <div class=\"typewriter-container\">\r\n    <div ref=\"textContainer\" class=\"typewriter-text\">\r\n      <div v-for=\"(line, index) in displayedLines\" :key=\"index\" class=\"line\">\r\n        {{ line }}\r\n      </div>\r\n    </div>\r\n    <span class=\"cursor\" v-if=\"isTyping\"></span>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'TypewriterText',\r\n  props: {\r\n    text: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    charSpeed: {\r\n      type: Number,\r\n      default: 50 // milliseconds per character\r\n    },\r\n    lineDelay: {\r\n      type: Number,\r\n      default: 500 // milliseconds between lines\r\n    },\r\n    startOnIntersect: {\r\n      type: Boolean,\r\n      default: true // start when visible\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      displayedLines: [],\r\n      currentLineIndex: 0,\r\n      currentCharIndex: 0,\r\n      fullLines: [],\r\n      isTyping: false,\r\n      timeoutId: null,\r\n      observer: null\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fullLines = this.text.split('\\n').filter(line => line.trim() !== '');\r\n\r\n    if (this.startOnIntersect) {\r\n      this.setupIntersectionObserver();\r\n    } else {\r\n      setTimeout(() => {\r\n        this.startTyping();\r\n      }, 0);\r\n    }\r\n  },\r\n  beforeUnmount() {\r\n    this.cleanup();\r\n  },\r\n  methods: {\r\n    startTyping() {\r\n      if (this.isTyping || this.displayedLines.length === this.fullLines.length) return;\r\n\r\n      this.isTyping = true;\r\n      this.typeNextCharacter();\r\n    },\r\n\r\n    typeNextCharacter() {\r\n      const currentLine = this.fullLines[this.currentLineIndex];\r\n\r\n      if (this.currentCharIndex <= currentLine.length) {\r\n        this.$set(this.displayedLines, this.currentLineIndex, currentLine.slice(0, this.currentCharIndex));\r\n        this.currentCharIndex++;\r\n\r\n        this.timeoutId = setTimeout(() => {\r\n          this.typeNextCharacter();\r\n        }, this.charSpeed);\r\n      } else {\r\n        // Move to next line after finishing current one\r\n        this.currentLineIndex++;\r\n        this.currentCharIndex = 0;\r\n\r\n        if (this.currentLineIndex < this.fullLines.length) {\r\n          this.timeoutId = setTimeout(() => {\r\n            this.typeNextCharacter();\r\n          }, this.lineDelay);\r\n        } else {\r\n          this.isTyping = false;\r\n        }\r\n      }\r\n    },\r\n\r\n    setupIntersectionObserver() {\r\n      const options = {\r\n        root: null,\r\n        rootMargin: '0px',\r\n        threshold: 0.1\r\n      };\r\n\r\n      this.observer = new IntersectionObserver((entries) => {\r\n        entries.forEach(entry => {\r\n          if (entry.isIntersecting && !this.isTyping && this.displayedLines.length === 0) {\r\n            this.startTyping();\r\n          }\r\n        });\r\n      }, options);\r\n\r\n      if (this.$refs.textContainer) {\r\n        this.observer.observe(this.$refs.textContainer);\r\n      }\r\n    },\r\n\r\n    cleanup() {\r\n      if (this.timeoutId) clearTimeout(this.timeoutId);\r\n      if (this.observer) this.observer.disconnect();\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.typewriter-container {\r\n  display: block;\r\n  width: 100%;\r\n}\r\n\r\n.typewriter-text {\r\n  white-space: pre-wrap;\r\n  word-break: break-word;\r\n}\r\n\r\n.line {\r\n  margin-bottom: 0.5em;\r\n}\r\n\r\n.cursor {\r\n  display: inline-block;\r\n  width: 2px;\r\n  height: 1em;\r\n  background-color: #17b5b5;\r\n  margin-left: 2px;\r\n  vertical-align: text-bottom;\r\n  animation: blink 0.7s infinite;\r\n}\r\n\r\n@keyframes blink {\r\n\r\n  0%,\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n\r\n  50% {\r\n    opacity: 0;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}