{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n// src/services/AIService.js\n\nimport { subjectPrompts } from \"../prompts/exercisePrompts.js\";\nclass AIService {\n  constructor() {\n    this.apiUrl = process.env.VUE_APP_OPENWEBUI_URL || \"https://chat.ivislabs.in/api/chat/completions\";\n    this.apiKey = process.env.VUE_APP_OPENWEBUI_API_KEY;\n    this.model = process.env.VUE_APP_OPENWEBUI_MODEL || \"llama2\"; // Changed from gpt-4o-mini to llama2\n  }\n  async generateExercises(sectionData, chapterMetadata) {\n    if (!this.apiKey) {\n      throw new Error(\"OpenWebUI API key not configured\");\n    }\n    try {\n      // Determine subject type from metadata\n      const subject = this.getSubjectType(chapterMetadata.subject);\n      const prompt = subjectPrompts[subject];\n      if (!prompt) {\n        throw new Error(`No prompt configuration found for subject: ${chapterMetadata.subject}`);\n      }\n\n      // Build context using the subject-specific context builder\n      const context = prompt.contextBuilder(sectionData, chapterMetadata);\n\n      // Modified request body to match OpenWebUI expected format\n      const requestBody = {\n        model: this.model,\n        messages: [{\n          role: \"system\",\n          content: prompt.systemPrompt\n        }, {\n          role: \"user\",\n          content: context\n        }],\n        temperature: 0.7,\n        max_tokens: 2000,\n        stream: false // Added stream: false\n      };\n      console.log(\"Making request to:\", this.apiUrl);\n      console.log(\"Request body:\", JSON.stringify(requestBody, null, 2));\n      const response = await fetch(this.apiUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${this.apiKey}`\n        },\n        body: JSON.stringify(requestBody)\n      });\n      console.log(\"Response status:\", response.status);\n      console.log(\"Response headers:\", response.headers);\n      if (!response.ok) {\n        let errorData;\n        try {\n          errorData = await response.json();\n        } catch (e) {\n          errorData = {\n            error: {\n              message: await response.text()\n            }\n          };\n        }\n        console.error(\"Error response:\", errorData);\n        throw new Error(`OpenWebUI API error: ${response.status} - ${errorData.error?.message || errorData.message || \"Unknown error\"}`);\n      }\n      const data = await response.json();\n      console.log(\"API Response:\", data);\n\n      // Handle different response formats from OpenWebUI\n      let content;\n      if (data.choices && data.choices[0] && data.choices[0].message) {\n        content = data.choices[0].message.content;\n      } else if (data.response) {\n        content = data.response;\n      } else if (data.content) {\n        content = data.content;\n      } else {\n        throw new Error(\"Invalid response format from OpenWebUI API\");\n      }\n\n      // Parse the JSON response\n      // Replace the JSON parsing section in AIService.js (lines ~90-120)\n\n      // Parse the JSON response\n      // Replace the JSON parsing section in AIService.js (lines ~90-120)\n\n      // Parse the JSON response\n      let exercises;\n      try {\n        exercises = JSON.parse(content);\n      } catch (parseError) {\n        console.log(\"Failed to parse as JSON, trying to extract JSON from response\");\n\n        // Try to extract JSON objects from the response\n        const jsonObjectRegex = /\\{[^{}]*(?:\\{[^{}]*\\}[^{}]*)*\\}/g;\n        const jsonObjects = content.match(jsonObjectRegex);\n        if (jsonObjects && jsonObjects.length > 0) {\n          try {\n            // Parse each JSON object and collect them into an array\n            exercises = jsonObjects.map(jsonStr => {\n              // Clean up the JSON string - remove any trailing commas and fix formatting\n              const cleanedJson = jsonStr.replace(/,\\s*}/g, \"}\").replace(/,\\s*]/g, \"]\").replace(/'/g, '\"');\n              return JSON.parse(cleanedJson);\n            });\n          } catch (e) {\n            console.error(\"Failed to parse extracted JSON objects:\", e);\n\n            // Last resort: try to extract a JSON array\n            const jsonArrayMatch = content.match(/\\[[\\s\\S]*\\]/);\n            if (jsonArrayMatch) {\n              try {\n                const cleanedArray = jsonArrayMatch[0].replace(/,\\s*}/g, \"}\").replace(/,\\s*]/g, \"]\").replace(/'/g, '\"');\n                exercises = JSON.parse(cleanedArray);\n              } catch (arrayError) {\n                console.error(\"Failed to parse extracted JSON array:\", arrayError);\n                throw new Error(\"Failed to parse exercises from AI response\");\n              }\n            } else {\n              throw new Error(\"Failed to parse exercises from AI response\");\n            }\n          }\n        } else {\n          console.error(\"No JSON objects found in response:\", content);\n          throw new Error(\"Failed to parse exercises from AI response\");\n        }\n      }\n\n      // Validate exercises structure\n      if (!Array.isArray(exercises)) {\n        throw new Error(\"AI response is not a valid array of exercises\");\n      }\n\n      // Ensure each exercise has required fields\n      const validatedExercises = exercises.map((exercise, index) => {\n        if (!exercise.type || !exercise.problem || !exercise.difficulty || !exercise.skillTargeted) {\n          console.warn(`Exercise ${index} missing required fields:`, exercise);\n          return {\n            type: exercise.type || \"Application\",\n            problem: exercise.problem || \"Problem not specified\",\n            difficulty: exercise.difficulty || \"Intermediate\",\n            skillTargeted: exercise.skillTargeted || \"General understanding\",\n            hint: exercise.hint || null,\n            solution: exercise.solution || null\n          };\n        }\n        return exercise;\n      });\n      return {\n        content: JSON.stringify(validatedExercises),\n        usage: data.usage || null\n      };\n    } catch (error) {\n      console.error(\"Error generating exercises:\", error);\n      throw error;\n    }\n  }\n  getSubjectType(subject) {\n    const subjectLower = subject.toLowerCase();\n    if (subjectLower.includes(\"math\") || subjectLower.includes(\"algebra\") || subjectLower.includes(\"geometry\") || subjectLower.includes(\"calculus\")) {\n      return \"mathematics\";\n    } else if (subjectLower.includes(\"science\") || subjectLower.includes(\"physics\") || subjectLower.includes(\"chemistry\") || subjectLower.includes(\"biology\")) {\n      return \"science\";\n    } else if (subjectLower.includes(\"social\") || subjectLower.includes(\"history\") || subjectLower.includes(\"geography\") || subjectLower.includes(\"civics\")) {\n      return \"socialScience\";\n    }\n\n    // Default to mathematics if subject type cannot be determined\n    return \"mathematics\";\n  }\n\n  // Enhanced test method with better error handling\n  async testConnection() {\n    try {\n      console.log(\"Testing connection to:\", this.apiUrl);\n      console.log(\"Using model:\", this.model);\n      const response = await fetch(this.apiUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${this.apiKey}`\n        },\n        body: JSON.stringify({\n          model: this.model,\n          messages: [{\n            role: \"user\",\n            content: \"Hello, this is a test message.\"\n          }],\n          max_tokens: 50,\n          stream: false\n        })\n      });\n      console.log(\"Test response status:\", response.status);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(\"Test connection failed:\", errorText);\n        return false;\n      }\n      const data = await response.json();\n      console.log(\"Test response data:\", data);\n      return true;\n    } catch (error) {\n      console.error(\"API connection test failed:\", error);\n      return false;\n    }\n  }\n}\nexport default AIService;","map":{"version":3,"names":["subjectPrompts","AIService","constructor","apiUrl","process","env","VUE_APP_OPENWEBUI_URL","apiKey","VUE_APP_OPENWEBUI_API_KEY","model","VUE_APP_OPENWEBUI_MODEL","generateExercises","sectionData","chapterMetadata","Error","subject","getSubjectType","prompt","context","contextBuilder","requestBody","messages","role","content","systemPrompt","temperature","max_tokens","stream","console","log","JSON","stringify","response","fetch","method","headers","Authorization","body","status","ok","errorData","json","e","error","message","text","data","choices","exercises","parse","parseError","jsonObjectRegex","jsonObjects","match","length","map","jsonStr","cleanedJson","replace","jsonArrayMatch","cleanedArray","arrayError","Array","isArray","validatedExercises","exercise","index","type","problem","difficulty","skillTargeted","warn","hint","solution","usage","subjectLower","toLowerCase","includes","testConnection","errorText"],"sources":["F:/IVIS_PROJECTS/2025/JULY/cbse/src/services/AIService.js"],"sourcesContent":["// src/services/AIService.js\r\n\r\nimport { subjectPrompts } from \"../prompts/exercisePrompts.js\";\r\n\r\nclass AIService {\r\n  constructor() {\r\n    this.apiUrl =\r\n      process.env.VUE_APP_OPENWEBUI_URL ||\r\n      \"https://chat.ivislabs.in/api/chat/completions\";\r\n    this.apiKey = process.env.VUE_APP_OPENWEBUI_API_KEY;\r\n    this.model = process.env.VUE_APP_OPENWEBUI_MODEL || \"llama2\"; // Changed from gpt-4o-mini to llama2\r\n  }\r\n\r\n  async generateExercises(sectionData, chapterMetadata) {\r\n    if (!this.apiKey) {\r\n      throw new Error(\"OpenWebUI API key not configured\");\r\n    }\r\n\r\n    try {\r\n      // Determine subject type from metadata\r\n      const subject = this.getSubjectType(chapterMetadata.subject);\r\n      const prompt = subjectPrompts[subject];\r\n\r\n      if (!prompt) {\r\n        throw new Error(\r\n          `No prompt configuration found for subject: ${chapterMetadata.subject}`\r\n        );\r\n      }\r\n\r\n      // Build context using the subject-specific context builder\r\n      const context = prompt.contextBuilder(sectionData, chapterMetadata);\r\n\r\n      // Modified request body to match OpenWebUI expected format\r\n      const requestBody = {\r\n        model: this.model,\r\n        messages: [\r\n          {\r\n            role: \"system\",\r\n            content: prompt.systemPrompt,\r\n          },\r\n          {\r\n            role: \"user\",\r\n            content: context,\r\n          },\r\n        ],\r\n        temperature: 0.7,\r\n        max_tokens: 2000,\r\n        stream: false, // Added stream: false\r\n      };\r\n\r\n      console.log(\"Making request to:\", this.apiUrl);\r\n      console.log(\"Request body:\", JSON.stringify(requestBody, null, 2));\r\n\r\n      const response = await fetch(this.apiUrl, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${this.apiKey}`,\r\n        },\r\n        body: JSON.stringify(requestBody),\r\n      });\r\n\r\n      console.log(\"Response status:\", response.status);\r\n      console.log(\"Response headers:\", response.headers);\r\n\r\n      if (!response.ok) {\r\n        let errorData;\r\n        try {\r\n          errorData = await response.json();\r\n        } catch (e) {\r\n          errorData = { error: { message: await response.text() } };\r\n        }\r\n\r\n        console.error(\"Error response:\", errorData);\r\n        throw new Error(\r\n          `OpenWebUI API error: ${response.status} - ${\r\n            errorData.error?.message || errorData.message || \"Unknown error\"\r\n          }`\r\n        );\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log(\"API Response:\", data);\r\n\r\n      // Handle different response formats from OpenWebUI\r\n      let content;\r\n      if (data.choices && data.choices[0] && data.choices[0].message) {\r\n        content = data.choices[0].message.content;\r\n      } else if (data.response) {\r\n        content = data.response;\r\n      } else if (data.content) {\r\n        content = data.content;\r\n      } else {\r\n        throw new Error(\"Invalid response format from OpenWebUI API\");\r\n      }\r\n\r\n      // Parse the JSON response\r\n      // Replace the JSON parsing section in AIService.js (lines ~90-120)\r\n\r\n      // Parse the JSON response\r\n      // Replace the JSON parsing section in AIService.js (lines ~90-120)\r\n\r\n      // Parse the JSON response\r\n      let exercises;\r\n      try {\r\n        exercises = JSON.parse(content);\r\n      } catch (parseError) {\r\n        console.log(\r\n          \"Failed to parse as JSON, trying to extract JSON from response\"\r\n        );\r\n\r\n        // Try to extract JSON objects from the response\r\n        const jsonObjectRegex = /\\{[^{}]*(?:\\{[^{}]*\\}[^{}]*)*\\}/g;\r\n        const jsonObjects = content.match(jsonObjectRegex);\r\n\r\n        if (jsonObjects && jsonObjects.length > 0) {\r\n          try {\r\n            // Parse each JSON object and collect them into an array\r\n            exercises = jsonObjects.map((jsonStr) => {\r\n              // Clean up the JSON string - remove any trailing commas and fix formatting\r\n              const cleanedJson = jsonStr\r\n                .replace(/,\\s*}/g, \"}\")\r\n                .replace(/,\\s*]/g, \"]\")\r\n                .replace(/'/g, '\"');\r\n\r\n              return JSON.parse(cleanedJson);\r\n            });\r\n          } catch (e) {\r\n            console.error(\"Failed to parse extracted JSON objects:\", e);\r\n\r\n            // Last resort: try to extract a JSON array\r\n            const jsonArrayMatch = content.match(/\\[[\\s\\S]*\\]/);\r\n            if (jsonArrayMatch) {\r\n              try {\r\n                const cleanedArray = jsonArrayMatch[0]\r\n                  .replace(/,\\s*}/g, \"}\")\r\n                  .replace(/,\\s*]/g, \"]\")\r\n                  .replace(/'/g, '\"');\r\n                exercises = JSON.parse(cleanedArray);\r\n              } catch (arrayError) {\r\n                console.error(\r\n                  \"Failed to parse extracted JSON array:\",\r\n                  arrayError\r\n                );\r\n                throw new Error(\"Failed to parse exercises from AI response\");\r\n              }\r\n            } else {\r\n              throw new Error(\"Failed to parse exercises from AI response\");\r\n            }\r\n          }\r\n        } else {\r\n          console.error(\"No JSON objects found in response:\", content);\r\n          throw new Error(\"Failed to parse exercises from AI response\");\r\n        }\r\n      }\r\n\r\n      // Validate exercises structure\r\n      if (!Array.isArray(exercises)) {\r\n        throw new Error(\"AI response is not a valid array of exercises\");\r\n      }\r\n\r\n      // Ensure each exercise has required fields\r\n      const validatedExercises = exercises.map((exercise, index) => {\r\n        if (\r\n          !exercise.type ||\r\n          !exercise.problem ||\r\n          !exercise.difficulty ||\r\n          !exercise.skillTargeted\r\n        ) {\r\n          console.warn(`Exercise ${index} missing required fields:`, exercise);\r\n          return {\r\n            type: exercise.type || \"Application\",\r\n            problem: exercise.problem || \"Problem not specified\",\r\n            difficulty: exercise.difficulty || \"Intermediate\",\r\n            skillTargeted: exercise.skillTargeted || \"General understanding\",\r\n            hint: exercise.hint || null,\r\n            solution: exercise.solution || null,\r\n          };\r\n        }\r\n        return exercise;\r\n      });\r\n\r\n      return {\r\n        content: JSON.stringify(validatedExercises),\r\n        usage: data.usage || null,\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Error generating exercises:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getSubjectType(subject) {\r\n    const subjectLower = subject.toLowerCase();\r\n\r\n    if (\r\n      subjectLower.includes(\"math\") ||\r\n      subjectLower.includes(\"algebra\") ||\r\n      subjectLower.includes(\"geometry\") ||\r\n      subjectLower.includes(\"calculus\")\r\n    ) {\r\n      return \"mathematics\";\r\n    } else if (\r\n      subjectLower.includes(\"science\") ||\r\n      subjectLower.includes(\"physics\") ||\r\n      subjectLower.includes(\"chemistry\") ||\r\n      subjectLower.includes(\"biology\")\r\n    ) {\r\n      return \"science\";\r\n    } else if (\r\n      subjectLower.includes(\"social\") ||\r\n      subjectLower.includes(\"history\") ||\r\n      subjectLower.includes(\"geography\") ||\r\n      subjectLower.includes(\"civics\")\r\n    ) {\r\n      return \"socialScience\";\r\n    }\r\n\r\n    // Default to mathematics if subject type cannot be determined\r\n    return \"mathematics\";\r\n  }\r\n\r\n  // Enhanced test method with better error handling\r\n  async testConnection() {\r\n    try {\r\n      console.log(\"Testing connection to:\", this.apiUrl);\r\n      console.log(\"Using model:\", this.model);\r\n\r\n      const response = await fetch(this.apiUrl, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${this.apiKey}`,\r\n        },\r\n        body: JSON.stringify({\r\n          model: this.model,\r\n          messages: [\r\n            {\r\n              role: \"user\",\r\n              content: \"Hello, this is a test message.\",\r\n            },\r\n          ],\r\n          max_tokens: 50,\r\n          stream: false,\r\n        }),\r\n      });\r\n\r\n      console.log(\"Test response status:\", response.status);\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error(\"Test connection failed:\", errorText);\r\n        return false;\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log(\"Test response data:\", data);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"API connection test failed:\", error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default AIService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}