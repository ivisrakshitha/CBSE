{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"typewriter-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"cursor\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"span\", {\n    ref: \"textContainer\",\n    class: \"typewriter-text\"\n  }, _toDisplayString($data.displayedText), 513 /* TEXT, NEED_PATCH */), $data.isTyping ? (_openBlock(), _createElementBlock(\"span\", _hoisted_2)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","ref","$data","displayedText","isTyping","_hoisted_2","_createCommentVNode"],"sources":["F:\\IVIS_PROJECTS\\2025\\JULY\\cbse\\src\\components\\TypewriterText.vue"],"sourcesContent":["<!-- src/components/TypewriterText.vue -->\r\n<template>\r\n    <div class=\"typewriter-container\">\r\n      <span ref=\"textContainer\" class=\"typewriter-text\">{{ displayedText }}</span>\r\n      <span class=\"cursor\" v-if=\"isTyping\"></span>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  export default {\r\n    name: 'TypewriterText',\r\n    props: {\r\n      text: {\r\n        type: String,\r\n        required: true\r\n      },\r\n      speed: {\r\n        type: Number,\r\n        default: 30 // milliseconds per character\r\n      },\r\n      delay: {\r\n        type: Number,\r\n        default: 0 // delay before starting animation in milliseconds\r\n      },\r\n      startOnIntersect: {\r\n        type: Boolean,\r\n        default: true // start typing when component comes into view\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        displayedText: '',\r\n        currentIndex: 0,\r\n        isTyping: false,\r\n        timeoutId: null,\r\n        observer: null\r\n      }\r\n    },\r\n    mounted() {\r\n      if (this.startOnIntersect) {\r\n        // Use Intersection Observer to detect when the element is visible\r\n        this.setupIntersectionObserver();\r\n      } else {\r\n        // Start typing immediately after the specified delay\r\n        setTimeout(() => {\r\n          this.startTyping();\r\n        }, this.delay);\r\n      }\r\n    },\r\n    beforeUnmount() {\r\n      this.cleanup();\r\n    },\r\n    methods: {\r\n      startTyping() {\r\n        if (this.isTyping) return;\r\n        \r\n        this.isTyping = true;\r\n        this.currentIndex = 0;\r\n        this.displayedText = '';\r\n        this.typeNextCharacter();\r\n      },\r\n      \r\n      typeNextCharacter() {\r\n        if (this.currentIndex < this.text.length) {\r\n          this.displayedText += this.text.charAt(this.currentIndex);\r\n          this.currentIndex++;\r\n          \r\n          // Schedule the next character\r\n          this.timeoutId = setTimeout(() => {\r\n            this.typeNextCharacter();\r\n          }, this.speed);\r\n        } else {\r\n          // Typing is complete\r\n          this.isTyping = false;\r\n        }\r\n      },\r\n      \r\n      setupIntersectionObserver() {\r\n        const options = {\r\n          root: null, // viewport\r\n          rootMargin: '0px',\r\n          threshold: 0.1 // trigger when at least 10% of the element is visible\r\n        };\r\n        \r\n        this.observer = new IntersectionObserver((entries) => {\r\n          entries.forEach(entry => {\r\n            if (entry.isIntersecting && !this.isTyping && this.currentIndex === 0) {\r\n              setTimeout(() => {\r\n                this.startTyping();\r\n              }, this.delay);\r\n            }\r\n          });\r\n        }, options);\r\n        \r\n        this.observer.observe(this.$refs.textContainer);\r\n      },\r\n      \r\n      cleanup() {\r\n        if (this.timeoutId) {\r\n          clearTimeout(this.timeoutId);\r\n        }\r\n        \r\n        if (this.observer) {\r\n          this.observer.disconnect();\r\n        }\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .typewriter-container {\r\n    display: inline-block;\r\n    line-height: 1.6;\r\n  }\r\n  \r\n  .typewriter-text {\r\n    white-space: pre-wrap;\r\n    word-break: break-word;\r\n  }\r\n  \r\n  .cursor {\r\n    display: inline-block;\r\n    width: 2px;\r\n    height: 1em;\r\n    background-color: #17b5b5;\r\n    margin-left: 2px;\r\n    vertical-align: text-bottom;\r\n    animation: blink 0.7s infinite;\r\n  }\r\n  \r\n  @keyframes blink {\r\n    0%, 100% { opacity: 1; }\r\n    50% { opacity: 0; }\r\n  }\r\n  </style>"],"mappings":";;EAESA,KAAK,EAAC;AAAsB;;EAFrCC,GAAA;EAIYD,KAAK,EAAC;;;uBAFdE,mBAAA,CAGM,OAHNC,UAGM,GAFJC,mBAAA,CAA4E;IAAtEC,GAAG,EAAC,eAAe;IAACL,KAAK,EAAC;sBAAqBM,KAAA,CAAAC,aAAa,gCACvCD,KAAA,CAAAE,QAAQ,I,cAAnCN,mBAAA,CAA4C,QAA5CO,UAA4C,KAJlDC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}