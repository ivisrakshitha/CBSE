{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n// src/services/AIService.js\n\nimport { subjectPrompts } from \"../prompts/exercisePrompts.js\";\nclass AIService {\n  constructor() {\n    this.apiUrl = process.env.VUE_APP_OPENWEBUI_URL || \"https://chat.ivislabs.in/api/chat/completions\";\n    this.apiKey = process.env.VUE_APP_OPENWEBUI_API_KEY;\n    this.model = process.env.VUE_APP_OPENWEBUI_MODEL || \"gpt-4o-mini\"; // Default model, can be changed\n  }\n  async generateExercises(sectionData, chapterMetadata) {\n    if (!this.apiKey) {\n      throw new Error(\"OpenWebUI API key not configured\");\n    }\n    try {\n      // Determine subject type from metadata\n      const subject = this.getSubjectType(chapterMetadata.subject);\n      const prompt = subjectPrompts[subject];\n      if (!prompt) {\n        throw new Error(`No prompt configuration found for subject: ${chapterMetadata.subject}`);\n      }\n\n      // Build context using the subject-specific context builder\n      const context = prompt.contextBuilder(sectionData, chapterMetadata);\n      const response = await fetch(this.apiUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${this.apiKey}`\n        },\n        body: JSON.stringify({\n          model: this.model,\n          messages: [{\n            role: \"system\",\n            content: prompt.systemPrompt\n          }, {\n            role: \"user\",\n            content: context\n          }],\n          temperature: 0.7,\n          max_tokens: 2000,\n          top_p: 1,\n          frequency_penalty: 0,\n          presence_penalty: 0\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(`OpenWebUI API error: ${response.status} - ${errorData.error?.message || \"Unknown error\"}`);\n      }\n      const data = await response.json();\n      if (!data.choices || !data.choices[0] || !data.choices[0].message) {\n        throw new Error(\"Invalid response format from OpenWebUI API\");\n      }\n      const content = data.choices[0].message.content;\n\n      // Parse the JSON response\n      let exercises;\n      try {\n        exercises = JSON.parse(content);\n      } catch (parseError) {\n        // If JSON parsing fails, try to extract JSON from the response\n        const jsonMatch = content.match(/\\[[\\s\\S]*\\]/);\n        if (jsonMatch) {\n          exercises = JSON.parse(jsonMatch[0]);\n        } else {\n          throw new Error(\"Failed to parse exercises from AI response\");\n        }\n      }\n\n      // Validate exercises structure\n      if (!Array.isArray(exercises)) {\n        throw new Error(\"AI response is not a valid array of exercises\");\n      }\n\n      // Ensure each exercise has required fields\n      const validatedExercises = exercises.map((exercise, index) => {\n        if (!exercise.type || !exercise.problem || !exercise.difficulty || !exercise.skillTargeted) {\n          console.warn(`Exercise ${index} missing required fields:`, exercise);\n          return {\n            type: exercise.type || \"Application\",\n            problem: exercise.problem || \"Problem not specified\",\n            difficulty: exercise.difficulty || \"Intermediate\",\n            skillTargeted: exercise.skillTargeted || \"General understanding\",\n            hint: exercise.hint || null,\n            solution: exercise.solution || null\n          };\n        }\n        return exercise;\n      });\n      return {\n        content: JSON.stringify(validatedExercises),\n        usage: data.usage || null\n      };\n    } catch (error) {\n      console.error(\"Error generating exercises:\", error);\n      throw error;\n    }\n  }\n  getSubjectType(subject) {\n    const subjectLower = subject.toLowerCase();\n    if (subjectLower.includes(\"math\") || subjectLower.includes(\"algebra\") || subjectLower.includes(\"geometry\") || subjectLower.includes(\"calculus\")) {\n      return \"mathematics\";\n    } else if (subjectLower.includes(\"science\") || subjectLower.includes(\"physics\") || subjectLower.includes(\"chemistry\") || subjectLower.includes(\"biology\")) {\n      return \"science\";\n    } else if (subjectLower.includes(\"social\") || subjectLower.includes(\"history\") || subjectLower.includes(\"geography\") || subjectLower.includes(\"civics\")) {\n      return \"socialScience\";\n    }\n\n    // Default to mathematics if subject type cannot be determined\n    return \"mathematics\";\n  }\n\n  // Optional: Method to test API connectivity\n  async testConnection() {\n    try {\n      const response = await fetch(this.apiUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${this.apiKey}`\n        },\n        body: JSON.stringify({\n          model: this.model,\n          messages: [{\n            role: \"user\",\n            content: \"Hello, this is a test message.\"\n          }],\n          max_tokens: 50\n        })\n      });\n      return response.ok;\n    } catch (error) {\n      console.error(\"API connection test failed:\", error);\n      return false;\n    }\n  }\n}\nexport default AIService;","map":{"version":3,"names":["subjectPrompts","AIService","constructor","apiUrl","process","env","VUE_APP_OPENWEBUI_URL","apiKey","VUE_APP_OPENWEBUI_API_KEY","model","VUE_APP_OPENWEBUI_MODEL","generateExercises","sectionData","chapterMetadata","Error","subject","getSubjectType","prompt","context","contextBuilder","response","fetch","method","headers","Authorization","body","JSON","stringify","messages","role","content","systemPrompt","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","ok","errorData","json","catch","status","error","message","data","choices","exercises","parse","parseError","jsonMatch","match","Array","isArray","validatedExercises","map","exercise","index","type","problem","difficulty","skillTargeted","console","warn","hint","solution","usage","subjectLower","toLowerCase","includes","testConnection"],"sources":["F:/IVIS_PROJECTS/2025/JULY/cbse/src/services/AIService.js"],"sourcesContent":["// src/services/AIService.js\r\n\r\nimport { subjectPrompts } from \"../prompts/exercisePrompts.js\";\r\n\r\nclass AIService {\r\n  constructor() {\r\n    this.apiUrl =\r\n      process.env.VUE_APP_OPENWEBUI_URL ||\r\n      \"https://chat.ivislabs.in/api/chat/completions\";\r\n    this.apiKey = process.env.VUE_APP_OPENWEBUI_API_KEY;\r\n    this.model = process.env.VUE_APP_OPENWEBUI_MODEL || \"gpt-4o-mini\"; // Default model, can be changed\r\n  }\r\n\r\n  async generateExercises(sectionData, chapterMetadata) {\r\n    if (!this.apiKey) {\r\n      throw new Error(\"OpenWebUI API key not configured\");\r\n    }\r\n\r\n    try {\r\n      // Determine subject type from metadata\r\n      const subject = this.getSubjectType(chapterMetadata.subject);\r\n      const prompt = subjectPrompts[subject];\r\n\r\n      if (!prompt) {\r\n        throw new Error(\r\n          `No prompt configuration found for subject: ${chapterMetadata.subject}`\r\n        );\r\n      }\r\n\r\n      // Build context using the subject-specific context builder\r\n      const context = prompt.contextBuilder(sectionData, chapterMetadata);\r\n\r\n      const response = await fetch(this.apiUrl, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${this.apiKey}`,\r\n        },\r\n        body: JSON.stringify({\r\n          model: this.model,\r\n          messages: [\r\n            {\r\n              role: \"system\",\r\n              content: prompt.systemPrompt,\r\n            },\r\n            {\r\n              role: \"user\",\r\n              content: context,\r\n            },\r\n          ],\r\n          temperature: 0.7,\r\n          max_tokens: 2000,\r\n          top_p: 1,\r\n          frequency_penalty: 0,\r\n          presence_penalty: 0,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(\r\n          `OpenWebUI API error: ${response.status} - ${\r\n            errorData.error?.message || \"Unknown error\"\r\n          }`\r\n        );\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      if (!data.choices || !data.choices[0] || !data.choices[0].message) {\r\n        throw new Error(\"Invalid response format from OpenWebUI API\");\r\n      }\r\n\r\n      const content = data.choices[0].message.content;\r\n\r\n      // Parse the JSON response\r\n      let exercises;\r\n      try {\r\n        exercises = JSON.parse(content);\r\n      } catch (parseError) {\r\n        // If JSON parsing fails, try to extract JSON from the response\r\n        const jsonMatch = content.match(/\\[[\\s\\S]*\\]/);\r\n        if (jsonMatch) {\r\n          exercises = JSON.parse(jsonMatch[0]);\r\n        } else {\r\n          throw new Error(\"Failed to parse exercises from AI response\");\r\n        }\r\n      }\r\n\r\n      // Validate exercises structure\r\n      if (!Array.isArray(exercises)) {\r\n        throw new Error(\"AI response is not a valid array of exercises\");\r\n      }\r\n\r\n      // Ensure each exercise has required fields\r\n      const validatedExercises = exercises.map((exercise, index) => {\r\n        if (\r\n          !exercise.type ||\r\n          !exercise.problem ||\r\n          !exercise.difficulty ||\r\n          !exercise.skillTargeted\r\n        ) {\r\n          console.warn(`Exercise ${index} missing required fields:`, exercise);\r\n          return {\r\n            type: exercise.type || \"Application\",\r\n            problem: exercise.problem || \"Problem not specified\",\r\n            difficulty: exercise.difficulty || \"Intermediate\",\r\n            skillTargeted: exercise.skillTargeted || \"General understanding\",\r\n            hint: exercise.hint || null,\r\n            solution: exercise.solution || null,\r\n          };\r\n        }\r\n        return exercise;\r\n      });\r\n\r\n      return {\r\n        content: JSON.stringify(validatedExercises),\r\n        usage: data.usage || null,\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Error generating exercises:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  getSubjectType(subject) {\r\n    const subjectLower = subject.toLowerCase();\r\n\r\n    if (\r\n      subjectLower.includes(\"math\") ||\r\n      subjectLower.includes(\"algebra\") ||\r\n      subjectLower.includes(\"geometry\") ||\r\n      subjectLower.includes(\"calculus\")\r\n    ) {\r\n      return \"mathematics\";\r\n    } else if (\r\n      subjectLower.includes(\"science\") ||\r\n      subjectLower.includes(\"physics\") ||\r\n      subjectLower.includes(\"chemistry\") ||\r\n      subjectLower.includes(\"biology\")\r\n    ) {\r\n      return \"science\";\r\n    } else if (\r\n      subjectLower.includes(\"social\") ||\r\n      subjectLower.includes(\"history\") ||\r\n      subjectLower.includes(\"geography\") ||\r\n      subjectLower.includes(\"civics\")\r\n    ) {\r\n      return \"socialScience\";\r\n    }\r\n\r\n    // Default to mathematics if subject type cannot be determined\r\n    return \"mathematics\";\r\n  }\r\n\r\n  // Optional: Method to test API connectivity\r\n  async testConnection() {\r\n    try {\r\n      const response = await fetch(this.apiUrl, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${this.apiKey}`,\r\n        },\r\n        body: JSON.stringify({\r\n          model: this.model,\r\n          messages: [\r\n            {\r\n              role: \"user\",\r\n              content: \"Hello, this is a test message.\",\r\n            },\r\n          ],\r\n          max_tokens: 50,\r\n        }),\r\n      });\r\n\r\n      return response.ok;\r\n    } catch (error) {\r\n      console.error(\"API connection test failed:\", error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default AIService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}