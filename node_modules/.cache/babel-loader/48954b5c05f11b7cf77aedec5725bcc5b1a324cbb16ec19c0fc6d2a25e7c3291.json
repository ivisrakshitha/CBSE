{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"typewriter-container\"\n};\nconst _hoisted_2 = {\n  ref: \"textContainer\",\n  class: \"typewriter-text\"\n};\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  key: 1\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"cursor\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.textLines, (line, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"line\",\n      key: index\n    }, [index < $data.currentLineIndex ? (_openBlock(), _createElementBlock(\"span\", _hoisted_3, _toDisplayString(line), 1 /* TEXT */)) : index === $data.currentLineIndex ? (_openBlock(), _createElementBlock(\"span\", _hoisted_4, [_createTextVNode(_toDisplayString(line) + \" \", 1 /* TEXT */), $data.isTyping ? (_openBlock(), _createElementBlock(\"span\", _hoisted_5)) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true)]);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["class","ref","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$data","textLines","line","index","currentLineIndex","_hoisted_3","_toDisplayString","_hoisted_4","_createTextVNode","isTyping","_hoisted_5","_createCommentVNode"],"sources":["F:\\IVIS_PROJECTS\\2025\\JULY\\cbse\\src\\components\\TypewriterText.vue"],"sourcesContent":["<template>\r\n  <div class=\"typewriter-container\">\r\n    <div ref=\"textContainer\" class=\"typewriter-text\">\r\n      <div class=\"line\" v-for=\"(line, index) in textLines\" :key=\"index\">\r\n        <span v-if=\"index < currentLineIndex\">{{ line }}</span>\r\n        <span v-else-if=\"index === currentLineIndex\">\r\n          {{ line }}\r\n          <span class=\"cursor\" v-if=\"isTyping\"></span>\r\n        </span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'TypewriterText',\r\n  props: {\r\n    text: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    lineDelay: {\r\n      type: Number,\r\n      default: 1000,\r\n    },\r\n    delay: {\r\n      type: Number,\r\n      default: 0,\r\n    },\r\n    startOnIntersect: {\r\n      type: Boolean,\r\n      default: true,\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      currentLineIndex: 0,\r\n      isTyping: false,\r\n      timeoutId: null,\r\n      observer: null,\r\n      textLines: []\r\n    };\r\n  },\r\n  mounted() {\r\n    this.prepareTextLines();\r\n\r\n    if (this.startOnIntersect) {\r\n      this.setupIntersectionObserver();\r\n    } else {\r\n      setTimeout(() => {\r\n        this.startTyping();\r\n      }, this.delay);\r\n    }\r\n  },\r\n  beforeUnmount() {\r\n    this.cleanup();\r\n  },\r\n  watch: {\r\n    text(newVal) {\r\n      this.prepareTextLines(newVal);\r\n      this.reset();\r\n    }\r\n  },\r\n  methods: {\r\n    prepareTextLines(sourceText) {\r\n      const input = sourceText || this.text;\r\n      if (input && typeof input === 'string') {\r\n        this.textLines = input.split('\\n').filter(line => line.trim() !== '');\r\n      } else {\r\n        console.warn('TypewriterText: `text` prop is missing or not a string.');\r\n        this.textLines = [];\r\n      }\r\n    },\r\n\r\n    startTyping() {\r\n      if (this.isTyping || this.currentLineIndex >= this.textLines.length) return;\r\n\r\n      this.isTyping = true;\r\n      this.typeNextLine();\r\n    },\r\n\r\n    typeNextLine() {\r\n      if (this.currentLineIndex >= this.textLines.length) {\r\n        this.isTyping = false;\r\n        return;\r\n      }\r\n\r\n      this.timeoutId = setTimeout(() => {\r\n        this.currentLineIndex++;\r\n        this.typeNextLine();\r\n      }, this.lineDelay);\r\n    },\r\n\r\n    reset() {\r\n      this.cleanup();\r\n      this.currentLineIndex = 0;\r\n      this.isTyping = false;\r\n    },\r\n\r\n    setupIntersectionObserver() {\r\n      const options = {\r\n        root: null,\r\n        rootMargin: '0px',\r\n        threshold: 0.1\r\n      };\r\n\r\n      this.observer = new IntersectionObserver((entries) => {\r\n        entries.forEach(entry => {\r\n          if (entry.isIntersecting && !this.isTyping && this.currentLineIndex === 0) {\r\n            setTimeout(() => {\r\n              this.startTyping();\r\n            }, this.delay);\r\n          }\r\n        });\r\n      }, options);\r\n\r\n      if (this.$refs.textContainer) {\r\n        this.observer.observe(this.$refs.textContainer);\r\n      }\r\n    },\r\n\r\n    cleanup() {\r\n      if (this.timeoutId) clearTimeout(this.timeoutId);\r\n      if (this.observer) this.observer.disconnect();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.typewriter-container {\r\n  display: block;\r\n  width: 100%;\r\n}\r\n\r\n.typewriter-text {\r\n  white-space: pre-wrap;\r\n  word-break: break-word;\r\n}\r\n\r\n.line {\r\n  margin-bottom: 0.5em;\r\n}\r\n\r\n.line:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.cursor {\r\n  display: inline-block;\r\n  width: 2px;\r\n  height: 1em;\r\n  background-color: #17b5b5;\r\n  margin-left: 2px;\r\n  vertical-align: text-bottom;\r\n  animation: blink 0.7s infinite;\r\n}\r\n\r\n@keyframes blink {\r\n\r\n  0%,\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n\r\n  50% {\r\n    opacity: 0;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAsB;;EAC1BC,GAAG,EAAC,eAAe;EAACD,KAAK,EAAC;;;EAFnCE,GAAA;AAAA;;EAAAA,GAAA;AAAA;;EAAAA,GAAA;EAOgBF,KAAK,EAAC;;;uBANpBG,mBAAA,CAUM,OAVNC,UAUM,GATJC,mBAAA,CAQM,OARNC,UAQM,I,kBAPJH,mBAAA,CAMMI,SAAA,QATZC,WAAA,CAGgDC,KAAA,CAAAC,SAAS,EAHzD,CAGgCC,IAAI,EAAEC,KAAK;yBAArCT,mBAAA,CAMM;MANDH,KAAK,EAAC,MAAM;MAAqCE,GAAG,EAAEU;QAC7CA,KAAK,GAAGH,KAAA,CAAAI,gBAAgB,I,cAApCV,mBAAA,CAAuD,QAJ/DW,UAAA,EAAAC,gBAAA,CAIiDJ,IAAI,oBAC5BC,KAAK,KAAKH,KAAA,CAAAI,gBAAgB,I,cAA3CV,mBAAA,CAGO,QARfa,UAAA,GAAAC,gBAAA,CAAAF,gBAAA,CAMaJ,IAAI,IAAG,GACV,iBAA2BF,KAAA,CAAAS,QAAQ,I,cAAnCf,mBAAA,CAA4C,QAA5CgB,UAA4C,KAPtDC,mBAAA,e,KAAAA,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}