{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"typewriter-container\"\n};\nconst _hoisted_2 = {\n  ref: \"textContainer\",\n  class: \"typewriter-text\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"cursor\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.displayedLines, (line, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"line\"\n    }, _toDisplayString(line), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), $data.isTyping ? (_openBlock(), _createElementBlock(\"span\", _hoisted_3)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","ref","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$data","displayedLines","line","index","isTyping","_hoisted_3","_createCommentVNode"],"sources":["F:\\IVIS_PROJECTS\\2025\\JULY\\cbse\\src\\components\\TypewriterText.vue"],"sourcesContent":["<!-- src/components/TypewriterText.vue -->\r\n<template>\r\n  <div class=\"typewriter-container\">\r\n    <div ref=\"textContainer\" class=\"typewriter-text\">\r\n      <div v-for=\"(line, index) in displayedLines\" :key=\"index\" class=\"line\">\r\n        {{ line }}\r\n      </div>\r\n    </div>\r\n    <span class=\"cursor\" v-if=\"isTyping\"></span>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'TypewriterText',\r\n  props: {\r\n    text: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    speed: {\r\n      type: Number,\r\n      default: 5000 // milliseconds per line\r\n    },\r\n    delay: {\r\n      type: Number,\r\n      default: 0 // delay before starting animation in milliseconds\r\n    },\r\n    startOnIntersect: {\r\n      type: Boolean,\r\n      default: true // start typing when component comes into view\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      displayedLines: [],\r\n      currentLineIndex: 0,\r\n      isTyping: false,\r\n      timeoutId: null,\r\n      observer: null,\r\n      textLines: []\r\n    }\r\n  },\r\n  mounted() {\r\n    // Split text into lines\r\n    this.textLines = this.text.split('\\n').filter(line => line.trim() !== '');\r\n\r\n    if (this.startOnIntersect) {\r\n      // Use Intersection Observer to detect when the element is visible\r\n      this.setupIntersectionObserver();\r\n    } else {\r\n      // Start typing immediately after the specified delay\r\n      setTimeout(() => {\r\n        this.startTyping();\r\n      }, this.delay);\r\n    }\r\n  },\r\n  beforeUnmount() {\r\n    this.cleanup();\r\n  },\r\n  watch: {\r\n    text() {\r\n      // Update lines if text prop changes\r\n      this.textLines = this.text.split('\\n').filter(line => line.trim() !== '');\r\n      this.reset();\r\n    }\r\n  },\r\n  methods: {\r\n    startTyping() {\r\n      if (this.isTyping) return;\r\n\r\n      this.isTyping = true;\r\n      this.currentLineIndex = 0;\r\n      this.displayedLines = [];\r\n      this.typeNextLine();\r\n    },\r\n\r\n    typeNextLine() {\r\n      if (this.currentLineIndex < this.textLines.length) {\r\n        this.displayedLines.push(this.textLines[this.currentLineIndex]);\r\n        this.currentLineIndex++;\r\n\r\n        // Schedule the next line\r\n        this.timeoutId = setTimeout(() => {\r\n          this.typeNextLine();\r\n        }, this.speed);\r\n      } else {\r\n        // Typing is complete\r\n        this.isTyping = false;\r\n      }\r\n    },\r\n\r\n    reset() {\r\n      this.cleanup();\r\n      this.displayedLines = [];\r\n      this.currentLineIndex = 0;\r\n      this.isTyping = false;\r\n    },\r\n\r\n    setupIntersectionObserver() {\r\n      const options = {\r\n        root: null, // viewport\r\n        rootMargin: '0px',\r\n        threshold: 0.1 // trigger when at least 10% of the element is visible\r\n      };\r\n\r\n      this.observer = new IntersectionObserver((entries) => {\r\n        entries.forEach(entry => {\r\n          if (entry.isIntersecting && !this.isTyping && this.currentLineIndex === 0) {\r\n            setTimeout(() => {\r\n              this.startTyping();\r\n            }, this.delay);\r\n          }\r\n        });\r\n      }, options);\r\n\r\n      this.observer.observe(this.$refs.textContainer);\r\n    },\r\n\r\n    cleanup() {\r\n      if (this.timeoutId) {\r\n        clearTimeout(this.timeoutId);\r\n      }\r\n\r\n      if (this.observer) {\r\n        this.observer.disconnect();\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.typewriter-container {\r\n  display: inline-block;\r\n  line-height: 1.6;\r\n}\r\n\r\n.typewriter-text {\r\n  white-space: pre-wrap;\r\n  word-break: break-word;\r\n}\r\n\r\n.line {\r\n  margin-bottom: 0.5em;\r\n}\r\n\r\n.line:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.cursor {\r\n  display: inline-block;\r\n  width: 2px;\r\n  height: 1em;\r\n  background-color: #17b5b5;\r\n  margin-left: 2px;\r\n  vertical-align: text-bottom;\r\n  animation: blink 0.7s infinite;\r\n}\r\n\r\n@keyframes blink {\r\n\r\n  0%,\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n\r\n  50% {\r\n    opacity: 0;\r\n  }\r\n}\r\n</style>"],"mappings":";;EAEOA,KAAK,EAAC;AAAsB;;EAC1BC,GAAG,EAAC,eAAe;EAACD,KAAK,EAAC;;;EAHnCE,GAAA;EAQUF,KAAK,EAAC;;;uBANdG,mBAAA,CAOM,OAPNC,UAOM,GANJC,mBAAA,CAIM,OAJNC,UAIM,I,kBAHJH,mBAAA,CAEMI,SAAA,QANZC,WAAA,CAImCC,KAAA,CAAAC,cAAc,EAJjD,CAImBC,IAAI,EAAEC,KAAK;yBAAxBT,mBAAA,CAEM;MAFwCD,GAAG,EAAEU,KAAK;MAAEZ,KAAK,EAAC;wBAC3DW,IAAI;0DAGgBF,KAAA,CAAAI,QAAQ,I,cAAnCV,mBAAA,CAA4C,QAA5CW,UAA4C,KARhDC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}