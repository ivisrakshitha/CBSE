{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nexport default {\n  name: 'TypewriterText',\n  props: {\n    text: {\n      type: String,\n      required: true\n    },\n    lineDelay: {\n      type: Number,\n      default: 1000 // delay between lines in milliseconds\n    },\n    delay: {\n      type: Number,\n      default: 0 // delay before starting animation\n    },\n    startOnIntersect: {\n      type: Boolean,\n      default: true // start animation only when element is visible\n    }\n  },\n  data() {\n    return {\n      currentLineIndex: 0,\n      isTyping: false,\n      timeoutId: null,\n      observer: null,\n      textLines: []\n    };\n  },\n  mounted() {\n    this.textLines = this.text.split('\\n').filter(line => line.trim() !== '');\n    if (this.startOnIntersect) {\n      this.setupIntersectionObserver();\n    } else {\n      setTimeout(() => {\n        this.startTyping();\n      }, this.delay);\n    }\n  },\n  beforeUnmount() {\n    this.cleanup();\n  },\n  watch: {\n    text() {\n      this.textLines = this.text.split('\\n').filter(line => line.trim() !== '');\n      this.reset();\n    }\n  },\n  methods: {\n    startTyping() {\n      if (this.isTyping || this.currentLineIndex >= this.textLines.length) return;\n      this.isTyping = true;\n      this.typeNextLine();\n    },\n    typeNextLine() {\n      if (this.currentLineIndex >= this.textLines.length) {\n        this.isTyping = false;\n        return;\n      }\n\n      // Show entire line at once\n      this.timeoutId = setTimeout(() => {\n        this.currentLineIndex++;\n        this.typeNextLine();\n      }, this.lineDelay);\n    },\n    reset() {\n      this.cleanup();\n      this.currentLineIndex = 0;\n      this.isTyping = false;\n    },\n    setupIntersectionObserver() {\n      const options = {\n        root: null,\n        rootMargin: '0px',\n        threshold: 0.1\n      };\n      this.observer = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting && !this.isTyping && this.currentLineIndex === 0) {\n            setTimeout(() => {\n              this.startTyping();\n            }, this.delay);\n          }\n        });\n      }, options);\n      if (this.$refs.textContainer) {\n        this.observer.observe(this.$refs.textContainer);\n      }\n    },\n    cleanup() {\n      if (this.timeoutId) clearTimeout(this.timeoutId);\n      if (this.observer) this.observer.disconnect();\n    }\n  }\n};","map":{"version":3,"names":["name","props","text","type","String","required","lineDelay","Number","default","delay","startOnIntersect","Boolean","data","currentLineIndex","isTyping","timeoutId","observer","textLines","mounted","split","filter","line","trim","setupIntersectionObserver","setTimeout","startTyping","beforeUnmount","cleanup","watch","reset","methods","length","typeNextLine","options","root","rootMargin","threshold","IntersectionObserver","entries","forEach","entry","isIntersecting","$refs","textContainer","observe","clearTimeout","disconnect"],"sources":["F:\\IVIS_PROJECTS\\2025\\JULY\\cbse\\src\\components\\TypewriterText.vue"],"sourcesContent":["<template>\r\n  <div class=\"typewriter-container\">\r\n    <div ref=\"textContainer\" class=\"typewriter-text\">\r\n      <div class=\"line\" v-for=\"(line, index) in textLines\" :key=\"index\">\r\n        <span v-if=\"index < currentLineIndex\">{{ line }}</span>\r\n        <span v-else-if=\"index === currentLineIndex\">\r\n          {{ line }}\r\n          <span class=\"cursor\" v-if=\"isTyping\"></span>\r\n        </span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'TypewriterText',\r\n  props: {\r\n    text: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    lineDelay: {\r\n      type: Number,\r\n      default: 1000 // delay between lines in milliseconds\r\n    },\r\n    delay: {\r\n      type: Number,\r\n      default: 0 // delay before starting animation\r\n    },\r\n    startOnIntersect: {\r\n      type: Boolean,\r\n      default: true // start animation only when element is visible\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      currentLineIndex: 0,\r\n      isTyping: false,\r\n      timeoutId: null,\r\n      observer: null,\r\n      textLines: []\r\n    };\r\n  },\r\n  mounted() {\r\n    this.textLines = this.text.split('\\n').filter(line => line.trim() !== '');\r\n\r\n    if (this.startOnIntersect) {\r\n      this.setupIntersectionObserver();\r\n    } else {\r\n      setTimeout(() => {\r\n        this.startTyping();\r\n      }, this.delay);\r\n    }\r\n  },\r\n  beforeUnmount() {\r\n    this.cleanup();\r\n  },\r\n  watch: {\r\n    text() {\r\n      this.textLines = this.text.split('\\n').filter(line => line.trim() !== '');\r\n      this.reset();\r\n    }\r\n  },\r\n  methods: {\r\n    startTyping() {\r\n      if (this.isTyping || this.currentLineIndex >= this.textLines.length) return;\r\n\r\n      this.isTyping = true;\r\n      this.typeNextLine();\r\n    },\r\n\r\n    typeNextLine() {\r\n      if (this.currentLineIndex >= this.textLines.length) {\r\n        this.isTyping = false;\r\n        return;\r\n      }\r\n\r\n      // Show entire line at once\r\n      this.timeoutId = setTimeout(() => {\r\n        this.currentLineIndex++;\r\n        this.typeNextLine();\r\n      }, this.lineDelay);\r\n    },\r\n\r\n    reset() {\r\n      this.cleanup();\r\n      this.currentLineIndex = 0;\r\n      this.isTyping = false;\r\n    },\r\n\r\n    setupIntersectionObserver() {\r\n      const options = {\r\n        root: null,\r\n        rootMargin: '0px',\r\n        threshold: 0.1\r\n      };\r\n\r\n      this.observer = new IntersectionObserver((entries) => {\r\n        entries.forEach(entry => {\r\n          if (entry.isIntersecting && !this.isTyping && this.currentLineIndex === 0) {\r\n            setTimeout(() => {\r\n              this.startTyping();\r\n            }, this.delay);\r\n          }\r\n        });\r\n      }, options);\r\n\r\n      if (this.$refs.textContainer) {\r\n        this.observer.observe(this.$refs.textContainer);\r\n      }\r\n    },\r\n\r\n    cleanup() {\r\n      if (this.timeoutId) clearTimeout(this.timeoutId);\r\n      if (this.observer) this.observer.disconnect();\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.typewriter-container {\r\n  display: block;\r\n  width: 100%;\r\n}\r\n\r\n.typewriter-text {\r\n  white-space: pre-wrap;\r\n  word-break: break-word;\r\n}\r\n\r\n.line {\r\n  margin-bottom: 0.5em;\r\n}\r\n\r\n.line:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.cursor {\r\n  display: inline-block;\r\n  width: 2px;\r\n  height: 1em;\r\n  background-color: #17b5b5;\r\n  margin-left: 2px;\r\n  vertical-align: text-bottom;\r\n  animation: blink 0.7s infinite;\r\n}\r\n\r\n@keyframes blink {\r\n\r\n  0%,\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n\r\n  50% {\r\n    opacity: 0;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}