{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nexport default {\n  name: 'TypewriterText',\n  props: {\n    text: {\n      type: String,\n      required: true\n    },\n    speed: {\n      type: Number,\n      default: 500 // milliseconds per line\n    },\n    delay: {\n      type: Number,\n      default: 100 // delay before starting animation in milliseconds\n    },\n    startOnIntersect: {\n      type: Boolean,\n      default: true // start typing when component comes into view\n    }\n  },\n  data() {\n    return {\n      displayedLines: [],\n      currentLineIndex: 0,\n      isTyping: false,\n      timeoutId: null,\n      observer: null,\n      textLines: []\n    };\n  },\n  mounted() {\n    // Split text into lines\n    this.textLines = this.text.split('\\n').filter(line => line.trim() !== '');\n    if (this.startOnIntersect) {\n      // Use Intersection Observer to detect when the element is visible\n      this.setupIntersectionObserver();\n    } else {\n      // Start typing immediately after the specified delay\n      setTimeout(() => {\n        this.startTyping();\n      }, this.delay);\n    }\n  },\n  beforeUnmount() {\n    this.cleanup();\n  },\n  watch: {\n    text() {\n      // Update lines if text prop changes\n      this.textLines = this.text.split('\\n').filter(line => line.trim() !== '');\n      this.reset();\n    }\n  },\n  methods: {\n    startTyping() {\n      if (this.isTyping) return;\n      this.isTyping = true;\n      this.currentLineIndex = 0;\n      this.displayedLines = [];\n      this.typeNextLine();\n    },\n    typeNextLine() {\n      if (this.currentLineIndex < this.textLines.length) {\n        this.displayedLines.push(this.textLines[this.currentLineIndex]);\n        this.currentLineIndex++;\n\n        // Schedule the next line\n        this.timeoutId = setTimeout(() => {\n          this.typeNextLine();\n        }, this.speed);\n      } else {\n        // Typing is complete\n        this.isTyping = false;\n      }\n    },\n    reset() {\n      this.cleanup();\n      this.displayedLines = [];\n      this.currentLineIndex = 0;\n      this.isTyping = false;\n    },\n    setupIntersectionObserver() {\n      const options = {\n        root: null,\n        // viewport\n        rootMargin: '0px',\n        threshold: 0.1 // trigger when at least 10% of the element is visible\n      };\n      this.observer = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting && !this.isTyping && this.currentLineIndex === 0) {\n            setTimeout(() => {\n              this.startTyping();\n            }, this.delay);\n          }\n        });\n      }, options);\n      this.observer.observe(this.$refs.textContainer);\n    },\n    cleanup() {\n      if (this.timeoutId) {\n        clearTimeout(this.timeoutId);\n      }\n      if (this.observer) {\n        this.observer.disconnect();\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","props","text","type","String","required","speed","Number","default","delay","startOnIntersect","Boolean","data","displayedLines","currentLineIndex","isTyping","timeoutId","observer","textLines","mounted","split","filter","line","trim","setupIntersectionObserver","setTimeout","startTyping","beforeUnmount","cleanup","watch","reset","methods","typeNextLine","length","push","options","root","rootMargin","threshold","IntersectionObserver","entries","forEach","entry","isIntersecting","observe","$refs","textContainer","clearTimeout","disconnect"],"sources":["F:\\IVIS_PROJECTS\\2025\\JULY\\cbse\\src\\components\\TypewriterText.vue"],"sourcesContent":["<!-- src/components/TypewriterText.vue -->\r\n<template>\r\n  <div class=\"typewriter-container\">\r\n    <div ref=\"textContainer\" class=\"typewriter-text\">\r\n      <div v-for=\"(line, index) in displayedLines\" :key=\"index\" class=\"line\">\r\n        {{ line }}\r\n      </div>\r\n    </div>\r\n    <span class=\"cursor\" v-if=\"isTyping\"></span>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'TypewriterText',\r\n  props: {\r\n    text: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    speed: {\r\n      type: Number,\r\n      default: 500 // milliseconds per line\r\n    },\r\n    delay: {\r\n      type: Number,\r\n      default: 100 // delay before starting animation in milliseconds\r\n    },\r\n    startOnIntersect: {\r\n      type: Boolean,\r\n      default: true // start typing when component comes into view\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      displayedLines: [],\r\n      currentLineIndex: 0,\r\n      isTyping: false,\r\n      timeoutId: null,\r\n      observer: null,\r\n      textLines: []\r\n    }\r\n  },\r\n  mounted() {\r\n    // Split text into lines\r\n    this.textLines = this.text.split('\\n').filter(line => line.trim() !== '');\r\n\r\n    if (this.startOnIntersect) {\r\n      // Use Intersection Observer to detect when the element is visible\r\n      this.setupIntersectionObserver();\r\n    } else {\r\n      // Start typing immediately after the specified delay\r\n      setTimeout(() => {\r\n        this.startTyping();\r\n      }, this.delay);\r\n    }\r\n  },\r\n  beforeUnmount() {\r\n    this.cleanup();\r\n  },\r\n  watch: {\r\n    text() {\r\n      // Update lines if text prop changes\r\n      this.textLines = this.text.split('\\n').filter(line => line.trim() !== '');\r\n      this.reset();\r\n    }\r\n  },\r\n  methods: {\r\n    startTyping() {\r\n      if (this.isTyping) return;\r\n\r\n      this.isTyping = true;\r\n      this.currentLineIndex = 0;\r\n      this.displayedLines = [];\r\n      this.typeNextLine();\r\n    },\r\n\r\n    typeNextLine() {\r\n      if (this.currentLineIndex < this.textLines.length) {\r\n        this.displayedLines.push(this.textLines[this.currentLineIndex]);\r\n        this.currentLineIndex++;\r\n\r\n        // Schedule the next line\r\n        this.timeoutId = setTimeout(() => {\r\n          this.typeNextLine();\r\n        }, this.speed);\r\n      } else {\r\n        // Typing is complete\r\n        this.isTyping = false;\r\n      }\r\n    },\r\n\r\n    reset() {\r\n      this.cleanup();\r\n      this.displayedLines = [];\r\n      this.currentLineIndex = 0;\r\n      this.isTyping = false;\r\n    },\r\n\r\n    setupIntersectionObserver() {\r\n      const options = {\r\n        root: null, // viewport\r\n        rootMargin: '0px',\r\n        threshold: 0.1 // trigger when at least 10% of the element is visible\r\n      };\r\n\r\n      this.observer = new IntersectionObserver((entries) => {\r\n        entries.forEach(entry => {\r\n          if (entry.isIntersecting && !this.isTyping && this.currentLineIndex === 0) {\r\n            setTimeout(() => {\r\n              this.startTyping();\r\n            }, this.delay);\r\n          }\r\n        });\r\n      }, options);\r\n\r\n      this.observer.observe(this.$refs.textContainer);\r\n    },\r\n\r\n    cleanup() {\r\n      if (this.timeoutId) {\r\n        clearTimeout(this.timeoutId);\r\n      }\r\n\r\n      if (this.observer) {\r\n        this.observer.disconnect();\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.typewriter-container {\r\n  display: inline-block;\r\n  line-height: 1.6;\r\n}\r\n\r\n.typewriter-text {\r\n  white-space: pre-wrap;\r\n  word-break: break-word;\r\n}\r\n\r\n.line {\r\n  margin-bottom: 0.5em;\r\n}\r\n\r\n.line:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.cursor {\r\n  display: inline-block;\r\n  width: 2px;\r\n  height: 1em;\r\n  background-color: #17b5b5;\r\n  margin-left: 2px;\r\n  vertical-align: text-bottom;\r\n  animation: blink 0.7s infinite;\r\n}\r\n\r\n@keyframes blink {\r\n\r\n  0%,\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n\r\n  50% {\r\n    opacity: 0;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}