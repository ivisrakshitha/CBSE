{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nexport default {\n  name: 'TypewriterText',\n  props: {\n    text: {\n      type: String,\n      required: true\n    },\n    speed: {\n      type: Number,\n      default: 1000 // milliseconds per section (heading + content)\n    },\n    delay: {\n      type: Number,\n      default: 0 // delay before starting animation in milliseconds\n    },\n    startOnIntersect: {\n      type: Boolean,\n      default: true // start typing when component comes into view\n    },\n    headingPattern: {\n      type: RegExp,\n      default: () => /^(#{1,6})\\s+(.+)$|^(\\d+\\.)\\s+(.+)$|^([A-Z][^:]*):?\\s*$/ // matches markdown headings, numbered headings, or capitalized headings\n    }\n  },\n  data() {\n    return {\n      displayedSections: [],\n      currentSectionIndex: 0,\n      isTyping: false,\n      timeoutId: null,\n      observer: null,\n      textSections: []\n    };\n  },\n  mounted() {\n    // Parse text into sections with headings and content\n    this.parseTextIntoSections();\n    if (this.startOnIntersect) {\n      // Use Intersection Observer to detect when the element is visible\n      this.setupIntersectionObserver();\n    } else {\n      // Start typing immediately after the specified delay\n      setTimeout(() => {\n        this.startTyping();\n      }, this.delay);\n    }\n  },\n  beforeUnmount() {\n    this.cleanup();\n  },\n  watch: {\n    text() {\n      // Update sections if text prop changes\n      this.parseTextIntoSections();\n      this.reset();\n    }\n  },\n  methods: {\n    parseTextIntoSections() {\n      const lines = this.text.split('\\n').filter(line => line.trim() !== '');\n      this.textSections = [];\n      let currentSection = {\n        heading: null,\n        content: []\n      };\n      lines.forEach(line => {\n        const trimmedLine = line.trim();\n\n        // Check if this line is a heading\n        if (this.isHeading(trimmedLine)) {\n          // If we have content in the current section, save it\n          if (currentSection.heading || currentSection.content.length > 0) {\n            this.textSections.push({\n              ...currentSection\n            });\n          }\n\n          // Start a new section with this heading\n          currentSection = {\n            heading: this.cleanHeading(trimmedLine),\n            content: []\n          };\n        } else {\n          // This is content for the current section\n          currentSection.content.push(trimmedLine);\n        }\n      });\n\n      // Add the last section if it has content\n      if (currentSection.heading || currentSection.content.length > 0) {\n        this.textSections.push(currentSection);\n      }\n\n      // If no sections were created, create one with all content\n      if (this.textSections.length === 0) {\n        this.textSections = [{\n          heading: null,\n          content: lines\n        }];\n      }\n    },\n    isHeading(line) {\n      // Check for various heading patterns\n      return line.match(/^#{1,6}\\s+.+$/) ||\n      // Markdown headings (# ## ###)\n      line.match(/^\\d+\\.\\s+.+$/) ||\n      // Numbered headings (1. 2. 3.)\n      line.match(/^[A-Z][^:]*:?\\s*$/) ||\n      // Capitalized headings (HEADING: or HEADING)\n      line.match(/^[A-Z][a-z\\s]+:?\\s*$/) // Title case headings (Title Case:)\n      ;\n    },\n    cleanHeading(heading) {\n      // Remove markdown symbols, numbers, and clean up the heading\n      return heading.replace(/^#{1,6}\\s+/, '') // Remove markdown #\n      .replace(/^\\d+\\.\\s+/, '') // Remove numbering\n      .replace(/:?\\s*$/, '') // Remove trailing colon and spaces\n      .trim();\n    },\n    startTyping() {\n      if (this.isTyping) return;\n      this.isTyping = true;\n      this.currentSectionIndex = 0;\n      this.displayedSections = [];\n      this.typeNextSection();\n    },\n    typeNextSection() {\n      if (this.currentSectionIndex < this.textSections.length) {\n        this.displayedSections.push({\n          ...this.textSections[this.currentSectionIndex]\n        });\n        this.currentSectionIndex++;\n\n        // Schedule the next section\n        this.timeoutId = setTimeout(() => {\n          this.typeNextSection();\n        }, this.speed);\n      } else {\n        // Typing is complete\n        this.isTyping = false;\n      }\n    },\n    reset() {\n      this.cleanup();\n      this.displayedSections = [];\n      this.currentSectionIndex = 0;\n      this.isTyping = false;\n    },\n    setupIntersectionObserver() {\n      const options = {\n        root: null,\n        // viewport\n        rootMargin: '0px',\n        threshold: 0.1 // trigger when at least 10% of the element is visible\n      };\n      this.observer = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting && !this.isTyping && this.currentSectionIndex === 0) {\n            setTimeout(() => {\n              this.startTyping();\n            }, this.delay);\n          }\n        });\n      }, options);\n      this.observer.observe(this.$refs.textContainer);\n    },\n    cleanup() {\n      if (this.timeoutId) {\n        clearTimeout(this.timeoutId);\n      }\n      if (this.observer) {\n        this.observer.disconnect();\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","props","text","type","String","required","speed","Number","default","delay","startOnIntersect","Boolean","headingPattern","RegExp","data","displayedSections","currentSectionIndex","isTyping","timeoutId","observer","textSections","mounted","parseTextIntoSections","setupIntersectionObserver","setTimeout","startTyping","beforeUnmount","cleanup","watch","reset","methods","lines","split","filter","line","trim","currentSection","heading","content","forEach","trimmedLine","isHeading","length","push","cleanHeading","match","replace","typeNextSection","options","root","rootMargin","threshold","IntersectionObserver","entries","entry","isIntersecting","observe","$refs","textContainer","clearTimeout","disconnect"],"sources":["F:\\IVIS_PROJECTS\\2025\\JULY\\cbse\\src\\components\\TypewriterText.vue"],"sourcesContent":["<!-- src/components/TypewriterText.vue -->\r\n<template>\r\n  <div class=\"typewriter-container\">\r\n    <div ref=\"textContainer\" class=\"typewriter-text\">\r\n      <div v-for=\"(section, index) in displayedSections\" :key=\"index\" class=\"section\">\r\n        <h3 v-if=\"section.heading\" class=\"heading\">{{ section.heading }}</h3>\r\n        <div v-for=\"(line, lineIndex) in section.content\" :key=\"lineIndex\" class=\"content-line\">\r\n          {{ line }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <span class=\"cursor\" v-if=\"isTyping\"></span>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'TypewriterText',\r\n  props: {\r\n    text: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    speed: {\r\n      type: Number,\r\n      default: 1000 // milliseconds per section (heading + content)\r\n    },\r\n    delay: {\r\n      type: Number,\r\n      default: 0 // delay before starting animation in milliseconds\r\n    },\r\n    startOnIntersect: {\r\n      type: Boolean,\r\n      default: true // start typing when component comes into view\r\n    },\r\n    headingPattern: {\r\n      type: RegExp,\r\n      default: () => /^(#{1,6})\\s+(.+)$|^(\\d+\\.)\\s+(.+)$|^([A-Z][^:]*):?\\s*$/ // matches markdown headings, numbered headings, or capitalized headings\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      displayedSections: [],\r\n      currentSectionIndex: 0,\r\n      isTyping: false,\r\n      timeoutId: null,\r\n      observer: null,\r\n      textSections: []\r\n    }\r\n  },\r\n  mounted() {\r\n    // Parse text into sections with headings and content\r\n    this.parseTextIntoSections();\r\n\r\n    if (this.startOnIntersect) {\r\n      // Use Intersection Observer to detect when the element is visible\r\n      this.setupIntersectionObserver();\r\n    } else {\r\n      // Start typing immediately after the specified delay\r\n      setTimeout(() => {\r\n        this.startTyping();\r\n      }, this.delay);\r\n    }\r\n  },\r\n  beforeUnmount() {\r\n    this.cleanup();\r\n  },\r\n  watch: {\r\n    text() {\r\n      // Update sections if text prop changes\r\n      this.parseTextIntoSections();\r\n      this.reset();\r\n    }\r\n  },\r\n  methods: {\r\n    parseTextIntoSections() {\r\n      const lines = this.text.split('\\n').filter(line => line.trim() !== '');\r\n      this.textSections = [];\r\n\r\n      let currentSection = {\r\n        heading: null,\r\n        content: []\r\n      };\r\n\r\n      lines.forEach(line => {\r\n        const trimmedLine = line.trim();\r\n\r\n        // Check if this line is a heading\r\n        if (this.isHeading(trimmedLine)) {\r\n          // If we have content in the current section, save it\r\n          if (currentSection.heading || currentSection.content.length > 0) {\r\n            this.textSections.push({ ...currentSection });\r\n          }\r\n\r\n          // Start a new section with this heading\r\n          currentSection = {\r\n            heading: this.cleanHeading(trimmedLine),\r\n            content: []\r\n          };\r\n        } else {\r\n          // This is content for the current section\r\n          currentSection.content.push(trimmedLine);\r\n        }\r\n      });\r\n\r\n      // Add the last section if it has content\r\n      if (currentSection.heading || currentSection.content.length > 0) {\r\n        this.textSections.push(currentSection);\r\n      }\r\n\r\n      // If no sections were created, create one with all content\r\n      if (this.textSections.length === 0) {\r\n        this.textSections = [{\r\n          heading: null,\r\n          content: lines\r\n        }];\r\n      }\r\n    },\r\n\r\n    isHeading(line) {\r\n      // Check for various heading patterns\r\n      return (\r\n        line.match(/^#{1,6}\\s+.+$/) ||  // Markdown headings (# ## ###)\r\n        line.match(/^\\d+\\.\\s+.+$/) ||   // Numbered headings (1. 2. 3.)\r\n        line.match(/^[A-Z][^:]*:?\\s*$/) || // Capitalized headings (HEADING: or HEADING)\r\n        line.match(/^[A-Z][a-z\\s]+:?\\s*$/) // Title case headings (Title Case:)\r\n      );\r\n    },\r\n\r\n    cleanHeading(heading) {\r\n      // Remove markdown symbols, numbers, and clean up the heading\r\n      return heading\r\n        .replace(/^#{1,6}\\s+/, '')  // Remove markdown #\r\n        .replace(/^\\d+\\.\\s+/, '')  // Remove numbering\r\n        .replace(/:?\\s*$/, '')     // Remove trailing colon and spaces\r\n        .trim();\r\n    },\r\n\r\n    startTyping() {\r\n      if (this.isTyping) return;\r\n\r\n      this.isTyping = true;\r\n      this.currentSectionIndex = 0;\r\n      this.displayedSections = [];\r\n      this.typeNextSection();\r\n    },\r\n\r\n    typeNextSection() {\r\n      if (this.currentSectionIndex < this.textSections.length) {\r\n        this.displayedSections.push({ ...this.textSections[this.currentSectionIndex] });\r\n        this.currentSectionIndex++;\r\n\r\n        // Schedule the next section\r\n        this.timeoutId = setTimeout(() => {\r\n          this.typeNextSection();\r\n        }, this.speed);\r\n      } else {\r\n        // Typing is complete\r\n        this.isTyping = false;\r\n      }\r\n    },\r\n\r\n    reset() {\r\n      this.cleanup();\r\n      this.displayedSections = [];\r\n      this.currentSectionIndex = 0;\r\n      this.isTyping = false;\r\n    },\r\n\r\n    setupIntersectionObserver() {\r\n      const options = {\r\n        root: null, // viewport\r\n        rootMargin: '0px',\r\n        threshold: 0.1 // trigger when at least 10% of the element is visible\r\n      };\r\n\r\n      this.observer = new IntersectionObserver((entries) => {\r\n        entries.forEach(entry => {\r\n          if (entry.isIntersecting && !this.isTyping && this.currentSectionIndex === 0) {\r\n            setTimeout(() => {\r\n              this.startTyping();\r\n            }, this.delay);\r\n          }\r\n        });\r\n      }, options);\r\n\r\n      this.observer.observe(this.$refs.textContainer);\r\n    },\r\n\r\n    cleanup() {\r\n      if (this.timeoutId) {\r\n        clearTimeout(this.timeoutId);\r\n      }\r\n\r\n      if (this.observer) {\r\n        this.observer.disconnect();\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.typewriter-container {\r\n  display: inline-block;\r\n  line-height: 1.6;\r\n  width: 100%;\r\n}\r\n\r\n.typewriter-text {\r\n  white-space: pre-wrap;\r\n  word-break: break-word;\r\n}\r\n\r\n.section {\r\n  margin-bottom: 1.5em;\r\n}\r\n\r\n.section:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.heading {\r\n  font-weight: bold;\r\n  font-size: 1.2em;\r\n  color: #17b5b5;\r\n  margin-bottom: 0.5em;\r\n  margin-top: 0;\r\n}\r\n\r\n.content-line {\r\n  margin-bottom: 0.3em;\r\n  padding-left: 0.5em;\r\n}\r\n\r\n.content-line:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.cursor {\r\n  display: inline-block;\r\n  width: 2px;\r\n  height: 1em;\r\n  background-color: #17b5b5;\r\n  margin-left: 2px;\r\n  vertical-align: text-bottom;\r\n  animation: blink 0.7s infinite;\r\n}\r\n\r\n@keyframes blink {\r\n\r\n  0%,\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n\r\n  50% {\r\n    opacity: 0;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}