{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nexport default {\n  name: 'TypewriterText',\n  props: {\n    text: {\n      type: String,\n      required: true\n    },\n    speed: {\n      type: Number,\n      default: 50 // milliseconds per character\n    },\n    lineDelay: {\n      type: Number,\n      default: 500 // milliseconds delay between lines\n    },\n    autoStart: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data() {\n    return {\n      currentLineIndex: 0,\n      currentCharIndex: 0,\n      isAnimating: false,\n      intervalId: null\n    };\n  },\n  computed: {\n    lines() {\n      // Split text into lines, handling both \\n and sentence endings\n      return this.text.split(/\\n|(?<=\\.)\\s+|(?<=\\!)\\s+|(?<=\\?)\\s+/).filter(line => line.trim().length > 0).map(line => line.trim());\n    }\n  },\n  mounted() {\n    if (this.autoStart) {\n      this.startAnimation();\n    }\n  },\n  beforeDestroy() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n  },\n  methods: {\n    startAnimation() {\n      if (this.isAnimating) return;\n      this.isAnimating = true;\n      this.currentLineIndex = 0;\n      this.currentCharIndex = 0;\n      this.animateText();\n    },\n    animateText() {\n      if (this.currentLineIndex >= this.lines.length) {\n        this.isAnimating = false;\n        return;\n      }\n      const currentLine = this.lines[this.currentLineIndex];\n      if (this.currentCharIndex < currentLine.length) {\n        // Continue typing current line\n        this.currentCharIndex++;\n        setTimeout(() => this.animateText(), this.speed);\n      } else {\n        // Move to next line after delay\n        this.currentLineIndex++;\n        this.currentCharIndex = 0;\n        setTimeout(() => this.animateText(), this.lineDelay);\n      }\n    },\n    skipAnimation() {\n      this.currentLineIndex = this.lines.length - 1;\n      this.currentCharIndex = this.lines[this.currentLineIndex]?.length || 0;\n      this.isAnimating = false;\n    }\n  }\n};","map":{"version":3,"names":["name","props","text","type","String","required","speed","Number","default","lineDelay","autoStart","Boolean","data","currentLineIndex","currentCharIndex","isAnimating","intervalId","computed","lines","split","filter","line","trim","length","map","mounted","startAnimation","beforeDestroy","clearInterval","methods","animateText","currentLine","setTimeout","skipAnimation"],"sources":["F:\\IVIS_PROJECTS\\2025\\JULY\\cbse\\src\\components\\TypewriterText.vue"],"sourcesContent":["<!-- src/components/TypewriterText.vue -->\r\n<template>\r\n  <div class=\"typewriter-container\">\r\n    <div v-for=\"(line, index) in lines\" :key=\"index\"\r\n      :class=\"['typewriter-line', { 'visible': index < currentLineIndex || (index === currentLineIndex && currentCharIndex >= line.length) }]\">\r\n      <span v-if=\"index < currentLineIndex\">{{ line }}</span>\r\n      <span v-else-if=\"index === currentLineIndex\">{{ line.substring(0, currentCharIndex) }}</span>\r\n      <span v-if=\"index === currentLineIndex && currentCharIndex < line.length\" class=\"cursor\">|</span>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'TypewriterText',\r\n  props: {\r\n    text: {\r\n      type: String,\r\n      required: true\r\n    },\r\n    speed: {\r\n      type: Number,\r\n      default: 50 // milliseconds per character\r\n    },\r\n    lineDelay: {\r\n      type: Number,\r\n      default: 500 // milliseconds delay between lines\r\n    },\r\n    autoStart: {\r\n      type: Boolean,\r\n      default: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      currentLineIndex: 0,\r\n      currentCharIndex: 0,\r\n      isAnimating: false,\r\n      intervalId: null\r\n    }\r\n  },\r\n  computed: {\r\n    lines() {\r\n      // Split text into lines, handling both \\n and sentence endings\r\n      return this.text\r\n        .split(/\\n|(?<=\\.)\\s+|(?<=\\!)\\s+|(?<=\\?)\\s+/)\r\n        .filter(line => line.trim().length > 0)\r\n        .map(line => line.trim());\r\n    }\r\n  },\r\n  mounted() {\r\n    if (this.autoStart) {\r\n      this.startAnimation();\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    if (this.intervalId) {\r\n      clearInterval(this.intervalId);\r\n    }\r\n  },\r\n  methods: {\r\n    startAnimation() {\r\n      if (this.isAnimating) return;\r\n\r\n      this.isAnimating = true;\r\n      this.currentLineIndex = 0;\r\n      this.currentCharIndex = 0;\r\n\r\n      this.animateText();\r\n    },\r\n\r\n    animateText() {\r\n      if (this.currentLineIndex >= this.lines.length) {\r\n        this.isAnimating = false;\r\n        return;\r\n      }\r\n\r\n      const currentLine = this.lines[this.currentLineIndex];\r\n\r\n      if (this.currentCharIndex < currentLine.length) {\r\n        // Continue typing current line\r\n        this.currentCharIndex++;\r\n        setTimeout(() => this.animateText(), this.speed);\r\n      } else {\r\n        // Move to next line after delay\r\n        this.currentLineIndex++;\r\n        this.currentCharIndex = 0;\r\n        setTimeout(() => this.animateText(), this.lineDelay);\r\n      }\r\n    },\r\n\r\n    skipAnimation() {\r\n      this.currentLineIndex = this.lines.length - 1;\r\n      this.currentCharIndex = this.lines[this.currentLineIndex]?.length || 0;\r\n      this.isAnimating = false;\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.typewriter-container {\r\n  display: block;\r\n  width: 100%;\r\n  line-height: 1.6;\r\n  font-family: inherit;\r\n}\r\n\r\n.typewriter-line {\r\n  display: block;\r\n  margin-bottom: 0.5em;\r\n  min-height: 1.6em;\r\n  opacity: 0;\r\n  transition: opacity 0.3s ease;\r\n}\r\n\r\n.typewriter-line.visible {\r\n  opacity: 1;\r\n}\r\n\r\n.typewriter-line:last-child {\r\n  margin-bottom: 0;\r\n}\r\n\r\n.cursor {\r\n  display: inline-block;\r\n  animation: blink 1s infinite;\r\n  color: #17b5b5;\r\n  font-weight: bold;\r\n}\r\n\r\n@keyframes blink {\r\n\r\n  0%,\r\n  50% {\r\n    opacity: 1;\r\n  }\r\n\r\n  51%,\r\n  100% {\r\n    opacity: 0;\r\n  }\r\n}\r\n\r\n/* Ensure proper text wrapping */\r\n.typewriter-line {\r\n  word-wrap: break-word;\r\n  overflow-wrap: break-word;\r\n  white-space: pre-wrap;\r\n}\r\n</style>"],"mappings":";;;AAaA,eAAe;EACbA,IAAI,EAAE,gBAAgB;EACtBC,KAAK,EAAE;IACLC,IAAI,EAAE;MACJC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ,CAAC;IACDC,KAAK,EAAE;MACLH,IAAI,EAAEI,MAAM;MACZC,OAAO,EAAE,EAAC,CAAE;IACd,CAAC;IACDC,SAAS,EAAE;MACTN,IAAI,EAAEI,MAAM;MACZC,OAAO,EAAE,GAAE,CAAE;IACf,CAAC;IACDE,SAAS,EAAE;MACTP,IAAI,EAAEQ,OAAO;MACbH,OAAO,EAAE;IACX;EACF,CAAC;EACDI,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,gBAAgB,EAAE,CAAC;MACnBC,gBAAgB,EAAE,CAAC;MACnBC,WAAW,EAAE,KAAK;MAClBC,UAAU,EAAE;IACd;EACF,CAAC;EACDC,QAAQ,EAAE;IACRC,KAAKA,CAAA,EAAG;MACN;MACA,OAAO,IAAI,CAAChB,IAAG,CACZiB,KAAK,CAAC,qCAAqC,EAC3CC,MAAM,CAACC,IAAG,IAAKA,IAAI,CAACC,IAAI,CAAC,CAAC,CAACC,MAAK,GAAI,CAAC,EACrCC,GAAG,CAACH,IAAG,IAAKA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;IAC7B;EACF,CAAC;EACDG,OAAOA,CAAA,EAAG;IACR,IAAI,IAAI,CAACf,SAAS,EAAE;MAClB,IAAI,CAACgB,cAAc,CAAC,CAAC;IACvB;EACF,CAAC;EACDC,aAAaA,CAAA,EAAG;IACd,IAAI,IAAI,CAACX,UAAU,EAAE;MACnBY,aAAa,CAAC,IAAI,CAACZ,UAAU,CAAC;IAChC;EACF,CAAC;EACDa,OAAO,EAAE;IACPH,cAAcA,CAAA,EAAG;MACf,IAAI,IAAI,CAACX,WAAW,EAAE;MAEtB,IAAI,CAACA,WAAU,GAAI,IAAI;MACvB,IAAI,CAACF,gBAAe,GAAI,CAAC;MACzB,IAAI,CAACC,gBAAe,GAAI,CAAC;MAEzB,IAAI,CAACgB,WAAW,CAAC,CAAC;IACpB,CAAC;IAEDA,WAAWA,CAAA,EAAG;MACZ,IAAI,IAAI,CAACjB,gBAAe,IAAK,IAAI,CAACK,KAAK,CAACK,MAAM,EAAE;QAC9C,IAAI,CAACR,WAAU,GAAI,KAAK;QACxB;MACF;MAEA,MAAMgB,WAAU,GAAI,IAAI,CAACb,KAAK,CAAC,IAAI,CAACL,gBAAgB,CAAC;MAErD,IAAI,IAAI,CAACC,gBAAe,GAAIiB,WAAW,CAACR,MAAM,EAAE;QAC9C;QACA,IAAI,CAACT,gBAAgB,EAAE;QACvBkB,UAAU,CAAC,MAAM,IAAI,CAACF,WAAW,CAAC,CAAC,EAAE,IAAI,CAACxB,KAAK,CAAC;MAClD,OAAO;QACL;QACA,IAAI,CAACO,gBAAgB,EAAE;QACvB,IAAI,CAACC,gBAAe,GAAI,CAAC;QACzBkB,UAAU,CAAC,MAAM,IAAI,CAACF,WAAW,CAAC,CAAC,EAAE,IAAI,CAACrB,SAAS,CAAC;MACtD;IACF,CAAC;IAEDwB,aAAaA,CAAA,EAAG;MACd,IAAI,CAACpB,gBAAe,GAAI,IAAI,CAACK,KAAK,CAACK,MAAK,GAAI,CAAC;MAC7C,IAAI,CAACT,gBAAe,GAAI,IAAI,CAACI,KAAK,CAAC,IAAI,CAACL,gBAAgB,CAAC,EAAEU,MAAK,IAAK,CAAC;MACtE,IAAI,CAACR,WAAU,GAAI,KAAK;IAC1B;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}