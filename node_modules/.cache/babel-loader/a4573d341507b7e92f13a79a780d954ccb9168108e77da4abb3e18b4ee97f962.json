{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n// src/services/AIService.js\n\nimport { subjectPrompts } from \"../prompts/exercisePrompts.js\";\nclass AIService {\n  constructor() {\n    this.apiUrl = process.env.VUE_APP_OPENWEBUI_URL || \"https://chat.ivislabs.in/api/chat/completions\";\n    this.apiKey = process.env.VUE_APP_OPENWEBUI_API_KEY;\n    this.model = process.env.VUE_APP_OPENWEBUI_MODEL || \"llama3.2:latest\";\n  }\n  async generateExercises(sectionData, chapterMetadata) {\n    if (!this.apiKey) {\n      throw new Error(\"OpenWebUI API key not configured\");\n    }\n    try {\n      // Determine subject type from metadata\n      const subject = this.getSubjectType(chapterMetadata.subject);\n      const prompt = subjectPrompts[subject];\n      if (!prompt) {\n        throw new Error(`No prompt configuration found for subject: ${chapterMetadata.subject}`);\n      }\n\n      // Build context using the subject-specific context builder\n      const context = prompt.contextBuilder(sectionData, chapterMetadata);\n\n      // Modified request body to match OpenWebUI expected format\n      const requestBody = {\n        model: this.model,\n        messages: [{\n          role: \"system\",\n          content: prompt.systemPrompt + \"\\n\\nIMPORTANT: Return ONLY a valid JSON array. Do not include any explanatory text, markdown formatting, or code blocks. Start directly with [ and end with ].\"\n        }, {\n          role: \"user\",\n          content: context\n        }],\n        temperature: 0.7,\n        max_tokens: 2000,\n        stream: false\n      };\n      console.log(\"Making request to:\", this.apiUrl);\n      console.log(\"Request body:\", JSON.stringify(requestBody, null, 2));\n      const response = await fetch(this.apiUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${this.apiKey}`\n        },\n        body: JSON.stringify(requestBody)\n      });\n      console.log(\"Response status:\", response.status);\n      console.log(\"Response headers:\", response.headers);\n      if (!response.ok) {\n        let errorData;\n        try {\n          errorData = await response.json();\n        } catch (e) {\n          errorData = {\n            error: {\n              message: await response.text()\n            }\n          };\n        }\n        console.error(\"Error response:\", errorData);\n        throw new Error(`OpenWebUI API error: ${response.status} - ${errorData.error?.message || errorData.message || \"Unknown error\"}`);\n      }\n      const data = await response.json();\n      console.log(\"API Response:\", data);\n\n      // Handle different response formats from OpenWebUI\n      let content;\n      if (data.choices && data.choices[0] && data.choices[0].message) {\n        content = data.choices[0].message.content;\n      } else if (data.response) {\n        content = data.response;\n      } else if (data.content) {\n        content = data.content;\n      } else {\n        throw new Error(\"Invalid response format from OpenWebUI API\");\n      }\n      console.log(\"Raw content:\", content);\n\n      // Enhanced JSON parsing with multiple fallback strategies\n      let exercises;\n      try {\n        exercises = this.parseExercisesFromContent(content);\n      } catch (parseError) {\n        console.error(\"Failed to parse exercises:\", parseError);\n        throw new Error(\"Failed to parse exercises from AI response\");\n      }\n\n      // Validate exercises structure\n      if (!Array.isArray(exercises)) {\n        throw new Error(\"AI response is not a valid array of exercises\");\n      }\n\n      // Ensure each exercise has required fields\n      const validatedExercises = exercises.map((exercise, index) => {\n        return this.validateExercise(exercise, index);\n      });\n      return {\n        content: JSON.stringify(validatedExercises),\n        usage: data.usage || null\n      };\n    } catch (error) {\n      console.error(\"Error generating exercises:\", error);\n      throw error;\n    }\n  }\n  parseExercisesFromContent(content) {\n    // Strategy 1: Try direct JSON parsing\n    try {\n      const parsed = JSON.parse(content);\n      if (Array.isArray(parsed)) {\n        return parsed;\n      }\n    } catch (e) {\n      console.log(\"Direct JSON parsing failed, trying alternative methods\");\n    }\n\n    // Strategy 2: Clean and try again\n    try {\n      const cleaned = this.cleanContent(content);\n      const parsed = JSON.parse(cleaned);\n      if (Array.isArray(parsed)) {\n        return parsed;\n      }\n    } catch (e) {\n      console.log(\"Cleaned JSON parsing failed, trying extraction methods\");\n    }\n\n    // Strategy 3: Extract JSON array from text\n    try {\n      const extracted = this.extractJsonArray(content);\n      if (extracted) {\n        return extracted;\n      }\n    } catch (e) {\n      console.log(\"JSON array extraction failed, trying object extraction\");\n    }\n\n    // Strategy 4: Extract individual JSON objects\n    try {\n      const objects = this.extractJsonObjects(content);\n      if (objects && objects.length > 0) {\n        return objects;\n      }\n    } catch (e) {\n      console.log(\"JSON object extraction failed\");\n    }\n\n    // Strategy 5: Create fallback exercises\n    console.log(\"All parsing strategies failed, creating fallback exercises\");\n    return this.createFallbackExercises();\n  }\n  cleanContent(content) {\n    return content.replace(/```json\\s*/g, \"\") // Remove markdown code blocks\n    .replace(/```\\s*/g, \"\").replace(/\\bNone\\b/g, \"null\") // Python None to null\n    .replace(/\\bTrue\\b/g, \"true\") // Python True to true\n    .replace(/\\bFalse\\b/g, \"false\") // Python False to false\n    .replace(/'/g, '\"') // Single quotes to double quotes\n    .replace(/,\\s*}/g, \"}\") // Remove trailing commas in objects\n    .replace(/,\\s*]/g, \"]\") // Remove trailing commas in arrays\n    .replace(/\\n/g, \" \") // Replace newlines with spaces\n    .replace(/\\s+/g, \" \") // Normalize whitespace\n    .trim();\n  }\n  extractJsonArray(content) {\n    const cleaned = this.cleanContent(content);\n\n    // Look for array patterns\n    const arrayMatches = cleaned.match(/\\[[\\s\\S]*?\\]/g);\n    if (arrayMatches) {\n      for (const match of arrayMatches) {\n        try {\n          const parsed = JSON.parse(match);\n          if (Array.isArray(parsed) && parsed.length > 0) {\n            return parsed;\n          }\n        } catch (e) {\n          continue;\n        }\n      }\n    }\n    return null;\n  }\n  extractJsonObjects(content) {\n    const cleaned = this.cleanContent(content);\n\n    // Enhanced regex to match JSON objects\n    const objectRegex = /\\{[^{}]*(?:\\{[^{}]*\\}[^{}]*)*\\}/g;\n    const matches = cleaned.match(objectRegex);\n    if (!matches) return null;\n    const objects = [];\n    for (const match of matches) {\n      try {\n        // Additional cleaning for each object\n        const cleanedMatch = match.replace(/,\\s*}/g, \"}\").replace(/,\\s*]/g, \"]\").replace(/:\\s*,/g, \": null,\").replace(/:\\s*}/g, \": null}\");\n        const parsed = JSON.parse(cleanedMatch);\n\n        // Validate that it looks like an exercise object\n        if (parsed.type || parsed.problem || parsed.difficulty) {\n          objects.push(parsed);\n        }\n      } catch (e) {\n        console.log(\"Failed to parse object:\", match, e);\n        continue;\n      }\n    }\n    return objects.length > 0 ? objects : null;\n  }\n  validateExercise(exercise, index) {\n    const defaultExercise = {\n      type: \"Application\",\n      problem: \"Problem not specified\",\n      difficulty: \"Intermediate\",\n      skillTargeted: \"General understanding\",\n      hint: null,\n      solution: null\n    };\n    if (!exercise || typeof exercise !== \"object\") {\n      console.warn(`Exercise ${index} is invalid:`, exercise);\n      return defaultExercise;\n    }\n    return {\n      type: exercise.type || defaultExercise.type,\n      problem: exercise.problem || defaultExercise.problem,\n      difficulty: exercise.difficulty || defaultExercise.difficulty,\n      skillTargeted: exercise.skillTargeted || defaultExercise.skillTargeted,\n      hint: exercise.hint === null || exercise.hint === undefined ? null : String(exercise.hint),\n      solution: exercise.solution === null || exercise.solution === undefined ? null : String(exercise.solution)\n    };\n  }\n  createFallbackExercises() {\n    return [{\n      type: \"Numerical\",\n      problem: \"Solve the given problem using the concepts from this section.\",\n      difficulty: \"Basic\",\n      skillTargeted: \"Basic concept application\",\n      hint: \"Review the key concepts and definitions from this section.\",\n      solution: \"Apply the fundamental principles step by step.\"\n    }, {\n      type: \"Application\",\n      problem: \"Apply the concepts learned in this section to solve a real-world problem.\",\n      difficulty: \"Intermediate\",\n      skillTargeted: \"Concept application\",\n      hint: \"Think about how the mathematical concepts relate to practical situations.\",\n      solution: \"Break down the problem into smaller parts and apply the relevant formulas.\"\n    }, {\n      type: \"Proof\",\n      problem: \"Prove the relationships and properties discussed in this section.\",\n      difficulty: \"Advanced\",\n      skillTargeted: \"Logical reasoning and proof construction\",\n      hint: \"Use the definitions and theorems from this section to build your proof.\",\n      solution: \"Structure your proof with clear logical steps and justifications.\"\n    }];\n  }\n  getSubjectType(subject) {\n    const subjectLower = subject.toLowerCase();\n    if (subjectLower.includes(\"math\") || subjectLower.includes(\"algebra\") || subjectLower.includes(\"geometry\") || subjectLower.includes(\"calculus\")) {\n      return \"mathematics\";\n    } else if (subjectLower.includes(\"science\") || subjectLower.includes(\"physics\") || subjectLower.includes(\"chemistry\") || subjectLower.includes(\"biology\")) {\n      return \"science\";\n    } else if (subjectLower.includes(\"social\") || subjectLower.includes(\"history\") || subjectLower.includes(\"geography\") || subjectLower.includes(\"civics\")) {\n      return \"socialScience\";\n    }\n\n    // Default to mathematics if subject type cannot be determined\n    return \"mathematics\";\n  }\n\n  // Enhanced test method with better error handling\n  async testConnection() {\n    try {\n      console.log(\"Testing connection to:\", this.apiUrl);\n      console.log(\"Using model:\", this.model);\n      const response = await fetch(this.apiUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${this.apiKey}`\n        },\n        body: JSON.stringify({\n          model: this.model,\n          messages: [{\n            role: \"user\",\n            content: \"Hello, this is a test message.\"\n          }],\n          max_tokens: 50,\n          stream: false\n        })\n      });\n      console.log(\"Test response status:\", response.status);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(\"Test connection failed:\", errorText);\n        return false;\n      }\n      const data = await response.json();\n      console.log(\"Test response data:\", data);\n      return true;\n    } catch (error) {\n      console.error(\"API connection test failed:\", error);\n      return false;\n    }\n  }\n}\nexport default AIService;","map":{"version":3,"names":["subjectPrompts","AIService","constructor","apiUrl","process","env","VUE_APP_OPENWEBUI_URL","apiKey","VUE_APP_OPENWEBUI_API_KEY","model","VUE_APP_OPENWEBUI_MODEL","generateExercises","sectionData","chapterMetadata","Error","subject","getSubjectType","prompt","context","contextBuilder","requestBody","messages","role","content","systemPrompt","temperature","max_tokens","stream","console","log","JSON","stringify","response","fetch","method","headers","Authorization","body","status","ok","errorData","json","e","error","message","text","data","choices","exercises","parseExercisesFromContent","parseError","Array","isArray","validatedExercises","map","exercise","index","validateExercise","usage","parsed","parse","cleaned","cleanContent","extracted","extractJsonArray","objects","extractJsonObjects","length","createFallbackExercises","replace","trim","arrayMatches","match","objectRegex","matches","cleanedMatch","type","problem","difficulty","push","defaultExercise","skillTargeted","hint","solution","warn","undefined","String","subjectLower","toLowerCase","includes","testConnection","errorText"],"sources":["F:/IVIS_PROJECTS/2025/JULY/cbse/src/services/AIService.js"],"sourcesContent":["// src/services/AIService.js\r\n\r\nimport { subjectPrompts } from \"../prompts/exercisePrompts.js\";\r\n\r\nclass AIService {\r\n  constructor() {\r\n    this.apiUrl =\r\n      process.env.VUE_APP_OPENWEBUI_URL ||\r\n      \"https://chat.ivislabs.in/api/chat/completions\";\r\n    this.apiKey = process.env.VUE_APP_OPENWEBUI_API_KEY;\r\n    this.model = process.env.VUE_APP_OPENWEBUI_MODEL || \"llama3.2:latest\";\r\n  }\r\n\r\n  async generateExercises(sectionData, chapterMetadata) {\r\n    if (!this.apiKey) {\r\n      throw new Error(\"OpenWebUI API key not configured\");\r\n    }\r\n\r\n    try {\r\n      // Determine subject type from metadata\r\n      const subject = this.getSubjectType(chapterMetadata.subject);\r\n      const prompt = subjectPrompts[subject];\r\n\r\n      if (!prompt) {\r\n        throw new Error(\r\n          `No prompt configuration found for subject: ${chapterMetadata.subject}`\r\n        );\r\n      }\r\n\r\n      // Build context using the subject-specific context builder\r\n      const context = prompt.contextBuilder(sectionData, chapterMetadata);\r\n\r\n      // Modified request body to match OpenWebUI expected format\r\n      const requestBody = {\r\n        model: this.model,\r\n        messages: [\r\n          {\r\n            role: \"system\",\r\n            content:\r\n              prompt.systemPrompt +\r\n              \"\\n\\nIMPORTANT: Return ONLY a valid JSON array. Do not include any explanatory text, markdown formatting, or code blocks. Start directly with [ and end with ].\",\r\n          },\r\n          {\r\n            role: \"user\",\r\n            content: context,\r\n          },\r\n        ],\r\n        temperature: 0.7,\r\n        max_tokens: 2000,\r\n        stream: false,\r\n      };\r\n\r\n      console.log(\"Making request to:\", this.apiUrl);\r\n      console.log(\"Request body:\", JSON.stringify(requestBody, null, 2));\r\n\r\n      const response = await fetch(this.apiUrl, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${this.apiKey}`,\r\n        },\r\n        body: JSON.stringify(requestBody),\r\n      });\r\n\r\n      console.log(\"Response status:\", response.status);\r\n      console.log(\"Response headers:\", response.headers);\r\n\r\n      if (!response.ok) {\r\n        let errorData;\r\n        try {\r\n          errorData = await response.json();\r\n        } catch (e) {\r\n          errorData = { error: { message: await response.text() } };\r\n        }\r\n\r\n        console.error(\"Error response:\", errorData);\r\n        throw new Error(\r\n          `OpenWebUI API error: ${response.status} - ${\r\n            errorData.error?.message || errorData.message || \"Unknown error\"\r\n          }`\r\n        );\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log(\"API Response:\", data);\r\n\r\n      // Handle different response formats from OpenWebUI\r\n      let content;\r\n      if (data.choices && data.choices[0] && data.choices[0].message) {\r\n        content = data.choices[0].message.content;\r\n      } else if (data.response) {\r\n        content = data.response;\r\n      } else if (data.content) {\r\n        content = data.content;\r\n      } else {\r\n        throw new Error(\"Invalid response format from OpenWebUI API\");\r\n      }\r\n\r\n      console.log(\"Raw content:\", content);\r\n\r\n      // Enhanced JSON parsing with multiple fallback strategies\r\n      let exercises;\r\n      try {\r\n        exercises = this.parseExercisesFromContent(content);\r\n      } catch (parseError) {\r\n        console.error(\"Failed to parse exercises:\", parseError);\r\n        throw new Error(\"Failed to parse exercises from AI response\");\r\n      }\r\n\r\n      // Validate exercises structure\r\n      if (!Array.isArray(exercises)) {\r\n        throw new Error(\"AI response is not a valid array of exercises\");\r\n      }\r\n\r\n      // Ensure each exercise has required fields\r\n      const validatedExercises = exercises.map((exercise, index) => {\r\n        return this.validateExercise(exercise, index);\r\n      });\r\n\r\n      return {\r\n        content: JSON.stringify(validatedExercises),\r\n        usage: data.usage || null,\r\n      };\r\n    } catch (error) {\r\n      console.error(\"Error generating exercises:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  parseExercisesFromContent(content) {\r\n    // Strategy 1: Try direct JSON parsing\r\n    try {\r\n      const parsed = JSON.parse(content);\r\n      if (Array.isArray(parsed)) {\r\n        return parsed;\r\n      }\r\n    } catch (e) {\r\n      console.log(\"Direct JSON parsing failed, trying alternative methods\");\r\n    }\r\n\r\n    // Strategy 2: Clean and try again\r\n    try {\r\n      const cleaned = this.cleanContent(content);\r\n      const parsed = JSON.parse(cleaned);\r\n      if (Array.isArray(parsed)) {\r\n        return parsed;\r\n      }\r\n    } catch (e) {\r\n      console.log(\"Cleaned JSON parsing failed, trying extraction methods\");\r\n    }\r\n\r\n    // Strategy 3: Extract JSON array from text\r\n    try {\r\n      const extracted = this.extractJsonArray(content);\r\n      if (extracted) {\r\n        return extracted;\r\n      }\r\n    } catch (e) {\r\n      console.log(\"JSON array extraction failed, trying object extraction\");\r\n    }\r\n\r\n    // Strategy 4: Extract individual JSON objects\r\n    try {\r\n      const objects = this.extractJsonObjects(content);\r\n      if (objects && objects.length > 0) {\r\n        return objects;\r\n      }\r\n    } catch (e) {\r\n      console.log(\"JSON object extraction failed\");\r\n    }\r\n\r\n    // Strategy 5: Create fallback exercises\r\n    console.log(\"All parsing strategies failed, creating fallback exercises\");\r\n    return this.createFallbackExercises();\r\n  }\r\n\r\n  cleanContent(content) {\r\n    return content\r\n      .replace(/```json\\s*/g, \"\") // Remove markdown code blocks\r\n      .replace(/```\\s*/g, \"\")\r\n      .replace(/\\bNone\\b/g, \"null\") // Python None to null\r\n      .replace(/\\bTrue\\b/g, \"true\") // Python True to true\r\n      .replace(/\\bFalse\\b/g, \"false\") // Python False to false\r\n      .replace(/'/g, '\"') // Single quotes to double quotes\r\n      .replace(/,\\s*}/g, \"}\") // Remove trailing commas in objects\r\n      .replace(/,\\s*]/g, \"]\") // Remove trailing commas in arrays\r\n      .replace(/\\n/g, \" \") // Replace newlines with spaces\r\n      .replace(/\\s+/g, \" \") // Normalize whitespace\r\n      .trim();\r\n  }\r\n\r\n  extractJsonArray(content) {\r\n    const cleaned = this.cleanContent(content);\r\n\r\n    // Look for array patterns\r\n    const arrayMatches = cleaned.match(/\\[[\\s\\S]*?\\]/g);\r\n    if (arrayMatches) {\r\n      for (const match of arrayMatches) {\r\n        try {\r\n          const parsed = JSON.parse(match);\r\n          if (Array.isArray(parsed) && parsed.length > 0) {\r\n            return parsed;\r\n          }\r\n        } catch (e) {\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  extractJsonObjects(content) {\r\n    const cleaned = this.cleanContent(content);\r\n\r\n    // Enhanced regex to match JSON objects\r\n    const objectRegex = /\\{[^{}]*(?:\\{[^{}]*\\}[^{}]*)*\\}/g;\r\n    const matches = cleaned.match(objectRegex);\r\n\r\n    if (!matches) return null;\r\n\r\n    const objects = [];\r\n    for (const match of matches) {\r\n      try {\r\n        // Additional cleaning for each object\r\n        const cleanedMatch = match\r\n          .replace(/,\\s*}/g, \"}\")\r\n          .replace(/,\\s*]/g, \"]\")\r\n          .replace(/:\\s*,/g, \": null,\")\r\n          .replace(/:\\s*}/g, \": null}\");\r\n\r\n        const parsed = JSON.parse(cleanedMatch);\r\n\r\n        // Validate that it looks like an exercise object\r\n        if (parsed.type || parsed.problem || parsed.difficulty) {\r\n          objects.push(parsed);\r\n        }\r\n      } catch (e) {\r\n        console.log(\"Failed to parse object:\", match, e);\r\n        continue;\r\n      }\r\n    }\r\n\r\n    return objects.length > 0 ? objects : null;\r\n  }\r\n\r\n  validateExercise(exercise, index) {\r\n    const defaultExercise = {\r\n      type: \"Application\",\r\n      problem: \"Problem not specified\",\r\n      difficulty: \"Intermediate\",\r\n      skillTargeted: \"General understanding\",\r\n      hint: null,\r\n      solution: null,\r\n    };\r\n\r\n    if (!exercise || typeof exercise !== \"object\") {\r\n      console.warn(`Exercise ${index} is invalid:`, exercise);\r\n      return defaultExercise;\r\n    }\r\n\r\n    return {\r\n      type: exercise.type || defaultExercise.type,\r\n      problem: exercise.problem || defaultExercise.problem,\r\n      difficulty: exercise.difficulty || defaultExercise.difficulty,\r\n      skillTargeted: exercise.skillTargeted || defaultExercise.skillTargeted,\r\n      hint:\r\n        exercise.hint === null || exercise.hint === undefined\r\n          ? null\r\n          : String(exercise.hint),\r\n      solution:\r\n        exercise.solution === null || exercise.solution === undefined\r\n          ? null\r\n          : String(exercise.solution),\r\n    };\r\n  }\r\n\r\n  createFallbackExercises() {\r\n    return [\r\n      {\r\n        type: \"Numerical\",\r\n        problem:\r\n          \"Solve the given problem using the concepts from this section.\",\r\n        difficulty: \"Basic\",\r\n        skillTargeted: \"Basic concept application\",\r\n        hint: \"Review the key concepts and definitions from this section.\",\r\n        solution: \"Apply the fundamental principles step by step.\",\r\n      },\r\n      {\r\n        type: \"Application\",\r\n        problem:\r\n          \"Apply the concepts learned in this section to solve a real-world problem.\",\r\n        difficulty: \"Intermediate\",\r\n        skillTargeted: \"Concept application\",\r\n        hint: \"Think about how the mathematical concepts relate to practical situations.\",\r\n        solution:\r\n          \"Break down the problem into smaller parts and apply the relevant formulas.\",\r\n      },\r\n      {\r\n        type: \"Proof\",\r\n        problem:\r\n          \"Prove the relationships and properties discussed in this section.\",\r\n        difficulty: \"Advanced\",\r\n        skillTargeted: \"Logical reasoning and proof construction\",\r\n        hint: \"Use the definitions and theorems from this section to build your proof.\",\r\n        solution:\r\n          \"Structure your proof with clear logical steps and justifications.\",\r\n      },\r\n    ];\r\n  }\r\n\r\n  getSubjectType(subject) {\r\n    const subjectLower = subject.toLowerCase();\r\n\r\n    if (\r\n      subjectLower.includes(\"math\") ||\r\n      subjectLower.includes(\"algebra\") ||\r\n      subjectLower.includes(\"geometry\") ||\r\n      subjectLower.includes(\"calculus\")\r\n    ) {\r\n      return \"mathematics\";\r\n    } else if (\r\n      subjectLower.includes(\"science\") ||\r\n      subjectLower.includes(\"physics\") ||\r\n      subjectLower.includes(\"chemistry\") ||\r\n      subjectLower.includes(\"biology\")\r\n    ) {\r\n      return \"science\";\r\n    } else if (\r\n      subjectLower.includes(\"social\") ||\r\n      subjectLower.includes(\"history\") ||\r\n      subjectLower.includes(\"geography\") ||\r\n      subjectLower.includes(\"civics\")\r\n    ) {\r\n      return \"socialScience\";\r\n    }\r\n\r\n    // Default to mathematics if subject type cannot be determined\r\n    return \"mathematics\";\r\n  }\r\n\r\n  // Enhanced test method with better error handling\r\n  async testConnection() {\r\n    try {\r\n      console.log(\"Testing connection to:\", this.apiUrl);\r\n      console.log(\"Using model:\", this.model);\r\n\r\n      const response = await fetch(this.apiUrl, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${this.apiKey}`,\r\n        },\r\n        body: JSON.stringify({\r\n          model: this.model,\r\n          messages: [\r\n            {\r\n              role: \"user\",\r\n              content: \"Hello, this is a test message.\",\r\n            },\r\n          ],\r\n          max_tokens: 50,\r\n          stream: false,\r\n        }),\r\n      });\r\n\r\n      console.log(\"Test response status:\", response.status);\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error(\"Test connection failed:\", errorText);\r\n        return false;\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log(\"Test response data:\", data);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"API connection test failed:\", error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default AIService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}