{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nexport default {\n  name: 'TypewriterText',\n  props: {\n    text: {\n      type: String,\n      required: true\n    },\n    speed: {\n      type: Number,\n      default: 30 // milliseconds per character\n    },\n    delay: {\n      type: Number,\n      default: 0 // delay before starting animation in milliseconds\n    },\n    startOnIntersect: {\n      type: Boolean,\n      default: true // start typing when component comes into view\n    }\n  },\n  data() {\n    return {\n      displayedText: '',\n      currentIndex: 0,\n      isTyping: false,\n      timeoutId: null,\n      observer: null\n    };\n  },\n  mounted() {\n    if (this.startOnIntersect) {\n      // Use Intersection Observer to detect when the element is visible\n      this.setupIntersectionObserver();\n    } else {\n      // Start typing immediately after the specified delay\n      setTimeout(() => {\n        this.startTyping();\n      }, this.delay);\n    }\n  },\n  beforeUnmount() {\n    this.cleanup();\n  },\n  methods: {\n    startTyping() {\n      if (this.isTyping) return;\n      this.isTyping = true;\n      this.currentIndex = 0;\n      this.displayedText = '';\n      this.typeNextCharacter();\n    },\n    typeNextCharacter() {\n      if (this.currentIndex < this.text.length) {\n        this.displayedText += this.text.charAt(this.currentIndex);\n        this.currentIndex++;\n\n        // Schedule the next character\n        this.timeoutId = setTimeout(() => {\n          this.typeNextCharacter();\n        }, this.speed);\n      } else {\n        // Typing is complete\n        this.isTyping = false;\n      }\n    },\n    setupIntersectionObserver() {\n      const options = {\n        root: null,\n        // viewport\n        rootMargin: '0px',\n        threshold: 0.1 // trigger when at least 10% of the element is visible\n      };\n      this.observer = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting && !this.isTyping && this.currentIndex === 0) {\n            setTimeout(() => {\n              this.startTyping();\n            }, this.delay);\n          }\n        });\n      }, options);\n      this.observer.observe(this.$refs.textContainer);\n    },\n    cleanup() {\n      if (this.timeoutId) {\n        clearTimeout(this.timeoutId);\n      }\n      if (this.observer) {\n        this.observer.disconnect();\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","props","text","type","String","required","speed","Number","default","delay","startOnIntersect","Boolean","data","displayedText","currentIndex","isTyping","timeoutId","observer","mounted","setupIntersectionObserver","setTimeout","startTyping","beforeUnmount","cleanup","methods","typeNextCharacter","length","charAt","options","root","rootMargin","threshold","IntersectionObserver","entries","forEach","entry","isIntersecting","observe","$refs","textContainer","clearTimeout","disconnect"],"sources":["/home/johnaic-admin/IVIS LABS/CBSE/cbse/src/components/TypewriterText.vue"],"sourcesContent":["<!-- src/components/TypewriterText.vue -->\n<template>\n    <div class=\"typewriter-container\">\n      <span ref=\"textContainer\" class=\"typewriter-text\">{{ displayedText }}</span>\n      <span class=\"cursor\" v-if=\"isTyping\"></span>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    name: 'TypewriterText',\n    props: {\n      text: {\n        type: String,\n        required: true\n      },\n      speed: {\n        type: Number,\n        default: 30 // milliseconds per character\n      },\n      delay: {\n        type: Number,\n        default: 0 // delay before starting animation in milliseconds\n      },\n      startOnIntersect: {\n        type: Boolean,\n        default: true // start typing when component comes into view\n      }\n    },\n    data() {\n      return {\n        displayedText: '',\n        currentIndex: 0,\n        isTyping: false,\n        timeoutId: null,\n        observer: null\n      }\n    },\n    mounted() {\n      if (this.startOnIntersect) {\n        // Use Intersection Observer to detect when the element is visible\n        this.setupIntersectionObserver();\n      } else {\n        // Start typing immediately after the specified delay\n        setTimeout(() => {\n          this.startTyping();\n        }, this.delay);\n      }\n    },\n    beforeUnmount() {\n      this.cleanup();\n    },\n    methods: {\n      startTyping() {\n        if (this.isTyping) return;\n        \n        this.isTyping = true;\n        this.currentIndex = 0;\n        this.displayedText = '';\n        this.typeNextCharacter();\n      },\n      \n      typeNextCharacter() {\n        if (this.currentIndex < this.text.length) {\n          this.displayedText += this.text.charAt(this.currentIndex);\n          this.currentIndex++;\n          \n          // Schedule the next character\n          this.timeoutId = setTimeout(() => {\n            this.typeNextCharacter();\n          }, this.speed);\n        } else {\n          // Typing is complete\n          this.isTyping = false;\n        }\n      },\n      \n      setupIntersectionObserver() {\n        const options = {\n          root: null, // viewport\n          rootMargin: '0px',\n          threshold: 0.1 // trigger when at least 10% of the element is visible\n        };\n        \n        this.observer = new IntersectionObserver((entries) => {\n          entries.forEach(entry => {\n            if (entry.isIntersecting && !this.isTyping && this.currentIndex === 0) {\n              setTimeout(() => {\n                this.startTyping();\n              }, this.delay);\n            }\n          });\n        }, options);\n        \n        this.observer.observe(this.$refs.textContainer);\n      },\n      \n      cleanup() {\n        if (this.timeoutId) {\n          clearTimeout(this.timeoutId);\n        }\n        \n        if (this.observer) {\n          this.observer.disconnect();\n        }\n      }\n    }\n  }\n  </script>\n  \n  <style scoped>\n  .typewriter-container {\n    display: inline-block;\n    line-height: 1.6;\n  }\n  \n  .typewriter-text {\n    white-space: pre-wrap;\n    word-break: break-word;\n  }\n  \n  .cursor {\n    display: inline-block;\n    width: 2px;\n    height: 1em;\n    background-color: #17b5b5;\n    margin-left: 2px;\n    vertical-align: text-bottom;\n    animation: blink 0.7s infinite;\n  }\n  \n  @keyframes blink {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0; }\n  }\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}