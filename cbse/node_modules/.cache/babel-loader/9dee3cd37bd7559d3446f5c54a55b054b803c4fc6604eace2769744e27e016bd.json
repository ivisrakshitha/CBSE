{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"typewriter-container\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"cursor\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"span\", {\n    ref: \"textContainer\",\n    class: \"typewriter-text\"\n  }, _toDisplayString($data.displayedText), 513), $data.isTyping ? (_openBlock(), _createElementBlock(\"span\", _hoisted_2)) : _createCommentVNode(\"\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","ref","$data","displayedText","isTyping","_hoisted_2","_createCommentVNode"],"sources":["/home/johnaic-admin/IVIS LABS/CBSE/cbse/src/components/TypewriterText.vue"],"sourcesContent":["<!-- src/components/TypewriterText.vue -->\n<template>\n    <div class=\"typewriter-container\">\n      <span ref=\"textContainer\" class=\"typewriter-text\">{{ displayedText }}</span>\n      <span class=\"cursor\" v-if=\"isTyping\"></span>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    name: 'TypewriterText',\n    props: {\n      text: {\n        type: String,\n        required: true\n      },\n      speed: {\n        type: Number,\n        default: 30 // milliseconds per character\n      },\n      delay: {\n        type: Number,\n        default: 0 // delay before starting animation in milliseconds\n      },\n      startOnIntersect: {\n        type: Boolean,\n        default: true // start typing when component comes into view\n      }\n    },\n    data() {\n      return {\n        displayedText: '',\n        currentIndex: 0,\n        isTyping: false,\n        timeoutId: null,\n        observer: null\n      }\n    },\n    mounted() {\n      if (this.startOnIntersect) {\n        // Use Intersection Observer to detect when the element is visible\n        this.setupIntersectionObserver();\n      } else {\n        // Start typing immediately after the specified delay\n        setTimeout(() => {\n          this.startTyping();\n        }, this.delay);\n      }\n    },\n    beforeUnmount() {\n      this.cleanup();\n    },\n    methods: {\n      startTyping() {\n        if (this.isTyping) return;\n        \n        this.isTyping = true;\n        this.currentIndex = 0;\n        this.displayedText = '';\n        this.typeNextCharacter();\n      },\n      \n      typeNextCharacter() {\n        if (this.currentIndex < this.text.length) {\n          this.displayedText += this.text.charAt(this.currentIndex);\n          this.currentIndex++;\n          \n          // Schedule the next character\n          this.timeoutId = setTimeout(() => {\n            this.typeNextCharacter();\n          }, this.speed);\n        } else {\n          // Typing is complete\n          this.isTyping = false;\n        }\n      },\n      \n      setupIntersectionObserver() {\n        const options = {\n          root: null, // viewport\n          rootMargin: '0px',\n          threshold: 0.1 // trigger when at least 10% of the element is visible\n        };\n        \n        this.observer = new IntersectionObserver((entries) => {\n          entries.forEach(entry => {\n            if (entry.isIntersecting && !this.isTyping && this.currentIndex === 0) {\n              setTimeout(() => {\n                this.startTyping();\n              }, this.delay);\n            }\n          });\n        }, options);\n        \n        this.observer.observe(this.$refs.textContainer);\n      },\n      \n      cleanup() {\n        if (this.timeoutId) {\n          clearTimeout(this.timeoutId);\n        }\n        \n        if (this.observer) {\n          this.observer.disconnect();\n        }\n      }\n    }\n  }\n  </script>\n  \n  <style scoped>\n  .typewriter-container {\n    display: inline-block;\n    line-height: 1.6;\n  }\n  \n  .typewriter-text {\n    white-space: pre-wrap;\n    word-break: break-word;\n  }\n  \n  .cursor {\n    display: inline-block;\n    width: 2px;\n    height: 1em;\n    background-color: #17b5b5;\n    margin-left: 2px;\n    vertical-align: text-bottom;\n    animation: blink 0.7s infinite;\n  }\n  \n  @keyframes blink {\n    0%, 100% { opacity: 1; }\n    50% { opacity: 0; }\n  }\n  </style>"],"mappings":";;EAESA,KAAK,EAAC;AAAsB;;EAFrCC,GAAA;EAIYD,KAAK,EAAC;;;uBAFdE,mBAAA,CAGM,OAHNC,UAGM,GAFJC,mBAAA,CAA4E;IAAtEC,GAAG,EAAC,eAAe;IAACL,KAAK,EAAC;sBAAqBM,KAAA,CAAAC,aAAa,SACvCD,KAAA,CAAAE,QAAQ,I,cAAnCN,mBAAA,CAA4C,QAA5CO,UAA4C,KAJlDC,mBAAA,W","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}